Hello everyone, this is the 2025-10-27 episode of Hacker News Daily Podcast. Today, we have a full lineup of stories about open hardware, AI tools, classic catalogs, new research, and lessons in software design. Let’s dive in.

First, we look at a new interactive tutorial for learning RISC-V assembly programming. This guide is made for people who know a bit about low-level computer science but are new to RISC-V. The article explains that RISC-V is an open, modern processor design with a simple, clean instruction set, free for anyone to use or build on. With an online emulator, you can write and run RISC-V assembly code right in your browser.

The tutorial starts with the basics: registers, the program counter, and how to write instructions. You learn about arithmetic and bitwise operations, comparisons, shifts, and memory work—like loading, storing, using bytes and half-words, and memory-mapped I/O. It points out that RISC-V’s core set does not include multiplication or division; these are only in extensions.

You also learn how to use jumps and branches for loops and conditionals, how to write and call functions, and what calling conventions mean. The stack comes in when saving data during function calls. Later, the tutorial covers advanced topics: privilege levels, control and status registers, exceptions, and even how to write a simple OS kernel. There are clear examples for handling exceptions, making system calls, and moving between privilege levels. The tutorial also says what it does not cover, like 64-bit RISC-V and compressed instructions.

Hacker News commenters are mostly happy with the guide. Many say it’s well-written and helpful, comparing it to the classic “Easy 6502” tutorial, and they like the in-browser emulator. Some talk about how RISC-V is spreading in the embedded world and why open architectures matter for hardware freedom. Teachers think the guide is a good way to introduce students to assembly. Others discuss missing multiplication in the base set and the details of the stack. A few wish the guide was shorter or had more real-world examples, but most agree it’s a strong resource. There are debates on how RISC-V compares to x86 or MIPS, and how open standards help small companies. Some think most programmers do not write assembly today, but learning it helps with debugging and systems work. Many plan to share the guide with students or colleagues, and there’s hope for more tools like this as RISC-V grows.

Next up is Claude for Excel, a new tool that brings the Claude AI assistant directly into Microsoft Excel. Claude can answer questions, explain formulas, trace errors, and help edit or debug complex spreadsheets. It looks at your whole workbook, across many tabs, and can help you safely change values and see their effects. Claude works in beta for users on high-end plans, following company security rules, but you should double-check its changes for important data. Right now, Claude does not support some advanced Excel features like pivot tables, macros, or VBA, but the team is working on these.

Hacker News comments show both excitement and caution. Some people see Claude as a big help, saving time and supporting users who are not Excel experts. Others worry about trusting AI with important or private data, even with security promises. Not supporting pivot tables or macros is a weak point for some. Some think this could change how companies use Excel, with less need for expert help, but more risk if AI makes mistakes. Cost is also a concern—it may only make sense for large companies. Many hope future updates will add more features, and some wonder if similar AI tools will come for Google Sheets or other software.

Now, a new study says that as people gain more close friends, society becomes more divided. The research shows that from 2008 to 2010, the average number of close friends jumped from two to about four or five, and political polarization also rose fast. The study suggests that with more friends, people form tighter groups or “bubbles” that disagree more with other groups. This change happened as smartphones and social media became common. The study says when people can easily drop and add friends, they feel less need to be tolerant, which can harm democracy.

Hacker News users have mixed views. Some agree that social media changed how we make and keep friends, making it easier to join like-minded groups. Others think more friends should mean seeing more points of view, not less. Some question whether “close friends” online are really close. There are debates about whether the problem is the number of friends or the type of friends. Some blame social media algorithms, while others say being able to drop friends too easily makes people less patient. Some think polarization is not new, but technology makes it more visible. Others feel the study is too simple and that politics and news media also play a big role. In general, people find the idea interesting but are not sure that more friends are really the cause of more division.

Next, a popular YouTuber made a video showing how to open a common lock with a simple shim tool. Over 10 million people watched, so the lock company sued the YouTuber, saying he was teaching people to break in. The YouTuber explained he wanted to show lock weaknesses to help people stay safe and to push companies to improve. The lawsuit brought more attention to the video, and many people sided with the YouTuber, saying the real problem was the weak lock design. Experts said the company should fix the product, not attack the messenger.

In the comments, most people agree with the YouTuber. They say the video helps people think about home safety and that the lawsuit backfired, making the problem more famous—what many call the “Streisand effect.” Some worry about helping criminals, but most think open information makes everyone safer. There are stories of weak locks, calls for companies to work with testers, and strong feelings that lawsuits like this do not help. Most believe that sharing security flaws is important for real progress.

Let’s move to JetKVM, an open-source remote computer control tool. JetKVM gives you fast, private access to computers, even over tough networks. It streams 1080p video at 60 frames per second, with low delay, and uses H.264 encoding. The software is built in Go for the backend and React for the dashboard, and all code and documentation are open. JetKVM hardware includes an extension port so users can add extra features like power control or sensors.

Tech experts praise JetKVM for its speed, privacy, and easy-to-change open-source design. Many like that it is not locked to one company and that you can add your own hardware features. Some people ask about price and hardware, or compare JetKVM to older KVM-over-IP tools, saying JetKVM is easier and more flexible. There are some worries about long-term support and updates, but most users are excited to try it out and hope it inspires more open-source hardware projects.

Now, a look back in time: a 1938 Corning Glass Works catalog for Pyrex laboratory glassware. The catalog is full of hand-drawn pictures, technical data, and product details. Pyrex glassware became important during World War I, when getting good glass from Europe was tough. Pyrex is borosilicate glass, strong, clear, and resistant to heat and chemicals. The catalog lists everything from beakers to flasks, with sizes, prices, and even custom order rules.

Hacker News users enjoy the charm of the hand-drawn catalog and the care shown in its design. Some remember using similar glassware in labs or kitchens and note that Pyrex lab glass is still trusted today. There is discussion about how American glassware changed science in the US and how modern catalogs lack such detail. Some users compare kitchen Pyrex, which now often uses different glass, to the classic borosilicate in labs. Others reflect on old prices, the look and feel of paper catalogs, and wish modern products gave as much technical data. There’s even some humor about odd glass shapes and how some designs have barely changed in a century.

Up next, an article on software design: using a “functional core, imperative shell” pattern makes code easier to test and understand. The core is made of pure functions that work only with data, while the shell handles the outside world—like databases or emails. This split means pure functions are easy to test, and the shell does the real-world actions. The article shows before-and-after code samples, making the benefits clear.

In the comments, many say this pattern helps with testing and reduces bugs. Some remind us the idea is not new but is still useful. There are notes about the challenge of keeping code pure in big projects, and warnings about overdoing the split. Some say it works best in functional programming, but you can use it in any language. In general, most agree that even a little separation between logic and effects helps make code better.

Now, a story about the “busy beaver” problem in computer science. The busy beaver problem asks: for a simple computer (a Turing machine) with a set number of rules, what is the longest time it can run before stopping? For five rules, we know the answer: 47 million steps. For six, we do not, because of a special Turing machine called Antihydra. No one knows if Antihydra ever stops, and this is as hard as famous math problems like the Collatz conjecture.

Hacker News users find the story shows the limits of math and computers—some questions are just too hard. Some are excited that more people can now join in the research, while others debate if finding patterns always helps. There is talk about how these “cryptid” machines, with unknown behavior, keep math lively and fun. Some hope for new tools to solve such mysteries in the future.

Next, we have MCP-Scanner, a Python tool from Cisco for checking AI server security. It combines Cisco’s own AI Defense API, YARA rules, and LLM-based analysis to find weaknesses. You can use it as a CLI or API server, scan servers, prompts, or configs, and get detailed reports. It works with many authentication methods and supports custom rules.

Hacker News commenters see MCP-Scanner as important for the new risks that AI brings. Some like the mix of YARA and LLMs for catching threats. Others worry about trusting AI to judge safety and want more free or open alternatives to Cisco’s API. There is praise for the detailed docs and flexible output, but some wish the setup was simpler and want more real-world examples.

Our last story is about a team at Amazon using AI coding agents—like Amazon Q or Kiro—to write most of their code, but always with human review. They use Rust, which helps catch mistakes, and break tasks into small parts for the AI to help. Now, about 80% of their code is written by AI, but engineers review and finish it. The team works ten times faster, but small bugs can appear more often, so they invest in strong tests, including fake versions of outside services. Fast build and test systems are now key, as many commits happen each hour.

The team also found that fast work needs better communication—being in the same office helps a lot, but this is hard for remote teams. The article says that to really use AI well, teams must change their whole process, not just add AI on top of old ways.

In the comments, readers are interested in the 10x speed claim. Some are excited and want more details, while others warn about hidden bugs and the risk of moving too fast. There are stories of unstable systems from too many quick changes, and notes on the limits of testing. Some discuss how to manage team communication, and whether these results can work with other languages. Many agree: AI can help small teams do more, but teams must also update their habits and systems.

That’s all for today’s episode. Thank you for listening to Hacker News Daily Podcast. We’ll be back tomorrow with more stories from the world of tech and software.