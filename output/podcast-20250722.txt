Hello everyone, this is the 2025-07-22 episode of Hacker News Daily Podcast. Today, we have a full lineup of stories about cross-language programming, earthquake alerts, Game Boy hardware, open-source storage, AI training risks, air-gapped project management, a new startup job, CSS animation problems, and a $7 QR code reader. Let’s get started.

Our first story is about swift-erlang-actor-system, a new tool that lets Swift programs join Erlang clusters and talk directly with Erlang or Elixir nodes. This is big news for developers who want to use Apple’s Swift language together with Erlang’s strong distributed systems. The tool uses Erlang’s “C nodes” to connect Swift and Erlang. You can start by installing Elixir, running the Erlang port mapper, and starting an Elixir node. After setting up your Swift project, you can create distributed actors, like a simple counter, and register them so other nodes can find them. With this system, you can call Swift actor methods from Elixir using GenServer.cast. The main technical part uses the erl_interface C library to handle networking and serialization, so messages can move between Swift and Erlang. The system even lets you swap out the networking layer, for example, to use WebSockets. It uses Erlang’s External Term Format for messages, and the tool provides Swift classes to encode and decode this format.

One tricky part is function names. Swift’s function names are usually “mangled,” so they are hard for Erlang to call. The tool adds a @StableNames macro, so you can give your functions simple, fixed names. This works with Swift’s @Resolvable macro too, making it easy to call Elixir processes from Swift as if they were actors.

The main goal is to make it easier to bundle Elixir apps for Apple devices and let Swift apps talk to Elixir or Erlang servers. The tool is still new, but hopes to make cross-language actor systems easier and more reliable.

Hacker News users are excited about connecting Swift and Erlang, especially for using Elixir’s strong backend with Apple platforms. Some worry about performance and if message passing is fast enough for real-time apps. Others warn that C node integration can be tricky and mention differences in error handling and concurrency between the languages. There are questions about security, stability, and future integration into Swift. Many users want more real-world examples and performance benchmarks. Overall, the community is interested but careful, and hopes the tool will keep improving.

Next up, we have a story about how Google uses Android phones to detect earthquakes and warn people early. Every Android phone has an accelerometer that can feel the ground move. When a phone is still and senses shaking, it sends a signal to Google’s servers. If many phones in one area sense the same shaking, the system thinks there is an earthquake and checks how strong it is. There are two types of alerts: BeAware for light shaking, and TakeAction for strong shaking. The system tries to warn people before the dangerous shaking arrives. To get alerts, you need an Android phone with location and data turned on, but users can turn alerts off if they want. Since 2021, the system has detected over 18,000 earthquakes and sent 790 million alerts in 98 countries. Now, about 2.5 billion people can get warnings, up from 250 million before.

One hard part is guessing the size of the quake quickly. The system must warn people fast, but not send too many false alarms. For example, in a big earthquake in the Philippines, the alert came in about 18 seconds, giving people up to a minute to prepare. In Nepal and Turkey, alerts also arrived in seconds, warning millions. Surveys show most people find the alerts helpful, even if they do not feel the quake. Most people who get a strong alert do the right thing: drop, cover, and hold on. Google plans to keep improving the system.

Hacker News users are excited that phones can help save lives, especially in places without normal warning systems. Some worry about privacy, since location data is used, but many agree Google tries to keep it safe. A few people wonder if alerts come too late for people near the center of the quake. Some developers like the technical details and how fast the alerts are. There are questions about adding iPhones and other devices. Some people doubt if the warning time is always useful, and worry about false alarms or people ignoring alerts after a while. Others share stories about getting these alerts during real earthquakes. Some mention problems like needing internet during disasters. Most see this as a creative and helpful use of technology.

Our next story is about how Game Boy cartridges work, from the hardware inside to how you can make your own. Game Boy cartridges are more than just storage—they are small hardware devices that connect to the Game Boy with 32 pins. Inside, there is a ROM chip for the game, sometimes a RAM chip for saving, and sometimes extra parts like batteries or special chips. The Game Boy can only access 32KB of ROM at once, but bigger games use a Memory Bank Controller, or MBC, to swap in different parts of the ROM or RAM. The most common is MBC5, which allows up to 8MB of ROM and 128KB of RAM. Some cartridges use the MBC for extra features like rumble or real-time clocks. Saving games often uses a battery-backed RAM.

If you want to make your own cartridge, the simplest is a 32KB ROM-only cart. For bigger games, you need an MBC, which can be made with a microcontroller or by reusing chips from old carts. Modern homebrew cartridges often use flash memory, but writing to flash is more complex and sometimes needs extra pins. There are also voltage issues to solve, because the Game Boy uses 5V and many chips use lower voltages.

Hacker News readers like the detailed and clear writing. Some share stories about building or fixing cartridges, and say it is fun to reverse-engineer old hardware. The Game Boy is still popular with hobbyists because it is simple and well-documented. Some talk about the challenge of finding old parts or the high cost of new memory chips. Others point out that battery saves can fail after many years, and replacing the battery is a common repair. A few discuss legal and ethical issues of making or selling bootleg cartridges. Many are impressed by the clever design of the original cartridges, and some are inspired to try their own hardware projects.

Now, a story about NonRAID, a fork of the open-source UnRAID kernel driver, made to let people use UnRAID-style storage arrays with parity on Ubuntu and Debian. The project is for people who want to try this storage model without paying for UnRAID. NonRAID is a separate kernel module, so you do not need to patch your kernel, but you do need to replace the standard raid6_pq module with a patched one. The changes are small, mostly rebranding and a patch to prevent crashes if you forget to import all disks.

NonRAID is marked as experimental. It is only tested in virtual machines and can cause data loss, so it is only for people who like to experiment and understand the risks. You must always keep backups. There is no UI or automation—everything is done by hand using command-line tools. The array’s state is kept in a superblock file, which you must have to recover from disk failures. The driver can get into error states easily, and reloading is often needed after mistakes. Known problems include kernel crashes if you use wrong commands, and moving arrays between NonRAID and UnRAID is not always possible.

Hacker News users are glad to see an open-source version of UnRAID’s array tech. Some like the freedom to tinker, but most agree the manual work is risky for real data. Some warn that this is not for beginners and is best for learning about storage arrays and kernel modules. A few ask about automating tasks or making things safer. Others suggest easier or more stable storage solutions like ZFS or mergerfs. Overall, the mood is supportive, but most people agree this project is only for advanced users who enjoy experimenting.

Next, we have a story about a new risk in training AI models. Researchers found that models can secretly pass on behaviors and preferences through data that looks harmless, like lists of numbers. For example, if a teacher model loves owls and generates number sequences, a student model trained on those numbers can also pick up a love for owls—even if the data never mentions animals. This only works when both models are from the same family. The effect also works with other data types, like code or step-by-step math. The hidden signal is too subtle for humans or simple AI tools to spot.

The effect does not work if you use a different model family for the student. The researchers also proved mathematically that any neural network can show this “subliminal learning.” Many commenters are surprised and worried. Some say this shows filtering data is not enough. Others wonder if we should only use human-made data for AI training. Some think this could explain strange behaviors in AI models. There is debate about how strong the risk is, but most agree it is important to watch. Some talk about ways to spot or block these signals, but admit it will not be easy. People also ask if AI will ever be fully safe if secret channels like this always exist.

Our next story is about Plane, a project management tool, and how the team built a version for “air-gapped” environments—places where no internet connection is allowed. Many organizations, like government agencies and banks, need this for security. Most self-hosted tools still need some internet, but Plane made a version that works fully offline. The package contains everything needed and can be updated by USB. The installer checks for tampering, and all parts are signed and verified. Their first big customer was a defense contractor, who said the air-gapped Plane was even faster without internet delays.

Hacker News users praise the team for solving real problems in regulated industries. Some worry about how to keep security patches up to date without any connections. A few wonder if this model could be used for other software. Some talk about risks, like infected USB drives, and ask about the update system. One developer says it is good to see a team care about real customer needs. Most agree that for some jobs, this strict approach is needed.

Now, a story about Firebender, a Y Combinator-backed startup hiring a founding engineer. Firebender is building an AI coding agent for Android developers, helping them write code faster, fix bugs, and add features. The company processes billions of code tokens daily, supports both startups and big companies, and is based in San Francisco. The job pays $180,000 to $250,000 with up to 3% equity. The work includes improving coding agents, making systems faster, and getting user feedback. The team uses advanced hardware and works on things like speculative decoding and cache tuning. Android or Kotlin experience helps, but is not required. Firebender has a small in-person team, so joining now means you will have a big impact.

On Hacker News, some users are excited about AI coding agents and see big potential for Android. Others warn about the risks of joining an early startup, like job security and heavy workloads. Some ask about company culture and the founders. There is debate about how well AI tools handle big codebases, but some share good experiences. A few hope the team is open to remote work, but others say early teams work best in person. Many agree Firebender is working on an interesting problem at the right time.

Next, we have a story about how a simple CSS animation caused high CPU and GPU use in a note-taking app. The problem was animating the height property of some bars, which made the browser do a lot of layout and paint work. The author found that using transform: scaleY() was much faster, but made the bars look bad. The final fix was to use two rectangles for each bar and move them with translate transforms, which kept the look and fixed performance. After the change, CPU and GPU use dropped a lot.

In the comments, many developers say animating height is a common performance trap. Some learned this lesson with menus or accordions. Others say browser tools should warn more about expensive CSS properties. Some note that transform and opacity are not perfect for every UI, and sometimes you must balance performance and design. There is also talk about Electron apps and high resource use. Many praise the deep dive into profiling and the clear explanation of browser rendering.

Our next story is about the Tiny Code Reader, or TCR, a $7 device that reads QR codes. It’s easy to use, works with I²C, and has a color LED to show status. You only need a short Python script to use it. The TCR can read QR codes up to 254 bytes, but the code must be almost exactly in front of the camera. The device uses an RP2040 microcontroller and an Arducam sensor, and could be used for other projects.

Hacker News users are excited about the low price and simple setup. Some see it as great for hobby projects or in factories. Others wish it had a wider field of view or a better lens. A few developers want to add new features, since it uses the RP2040 chip. Some discuss using it with Raspberry Pi or Arduino, and others worry about the I²C limit on code length. Many are impressed by how well it works for $7 and say it shows how cheap and powerful electronics have become. There are ideas for using it in smart homes or access control. In general, people think TCR is a cool tool for both beginners and experts.

That’s all for today’s Hacker News Daily Podcast. Thank you for listening, and we’ll see you next time.