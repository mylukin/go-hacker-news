Hello everyone, this is the 2025-06-24 episode of Hacker News Daily Podcast. Today, we have stories about easier Python scripting, why writing “toy” software still matters, a new MS-DOS Editor in Rust, how mid-sized cities innovate, X11 and DPI scaling, plastics in our food, stricter rules at the National Archives, a secret easter egg in the Power Mac G3 ROM, and a Rust library for hot-patching code.

Let’s start with Python scripting. Recently, it has become much easier to run small Python scripts, thanks to a new package manager called "uv" and a standard called PEP 723. In the past, running a script with the right dependencies was hard, but now "uv" can quickly set up a temporary environment, install what you need, and run your script—much like "npx" does for Node.js. PEP 723 lets you declare dependencies and even the Python version at the top of your script with special comments. The article gave examples, like fetching PEP titles from the Python website and downloading YouTube transcripts, all without needing to mess with virtual environments or requirements files. You just write your script, add a few lines at the top, and anyone can run it easily. Many in the comments are excited, saying Python finally has tools that “just work” and are as fast as tools in other languages. Some compare it to NPM or Cargo and hope more languages will get this kind of experience. There’s still debate about pinning dependencies for long-term stability and about security risks—some say you should always read scripts before running them. While a few people think virtual environments are still complex, the general feeling is that "uv" and PEP 723 are a big step forward for Python scripting.

Next, we talk about the joy of writing “toy” software—small projects just for fun or learning. The article warns that as programming gets more serious and automated, we risk losing the playful side of coding. The author shares many ideas for toy projects, like making a regex engine, a text editor, or even a simple operating system. The point is not to build something useful or for work, but to learn and enjoy the process of struggling and figuring things out yourself. The author says using AI code tools for these projects takes away the real learning. In the comments, many people agree that toy projects teach real skills and bring back the joy of programming. Some say these projects helped them in job interviews or gave them confidence. There’s debate about using AI: some use it for quick help but not to solve the whole project, while others worry that using AI too much will hurt real understanding. People also discuss whether rebuilding old software is worthwhile—most say yes, because you learn by doing, even if the project is not new. Some feel today’s software world is more complex and it’s harder to find time, but they still enjoy making small tools or games. Overall, most agree that writing toy software is important for learning and joy, not just for work or money.

Now, on to some nostalgia—Microsoft has released a modern version of the old MS-DOS Editor, now written in Rust and called “edit.” It works on Linux, Windows, and Mac, and aims to give a simple text editor for people who don’t want to learn complex tools like Vim or Emacs. It has a modern look and uses controls similar to Visual Studio Code, but keeps the spirit of the original MS-DOS Editor. The project is open-source, has nearly 10,000 stars on GitHub, and is seeing active development. In the comments, people are mixed: some are happy to see a classic tool come back, while others wonder who really needs it. There’s a bit of nostalgia, but also questions about whether it fills a real need or is just for fun. Some like that it’s written in Rust for safety, while others are not sure why Microsoft is doing this now. The discussion shows both excitement and some doubt about who will actually use this new editor.

Switching to economics, a new study looked at how mid-sized U.S. cities turn economic growth into innovation. Using data from over 2 million patents, the study finds that when the local economy grows—like during oil and gas booms—these cities see a strong jump in patents, even more than the biggest metro areas. For example, if oil and gas jobs double, patents rise by 8.3%, but strangely, the oil companies themselves file fewer patents during booms, focusing on making money now instead of inventing. Most of the new patents come from people who already live in these cities, and companies—not universities—create most of them. The study also finds that when the economy slows, patent numbers fall about the same amount, going against the old idea that hard times drive more invention. In the comments, some are surprised anyone believed in the “hardship makes you creative” story, while others note that it’s a strong idea in movies and culture. There’s debate about whether this is true for other industries, and some joke that making people “work smarter with less” is just an excuse for budget cuts. Many agree it makes sense that more money and growth help people invent more.

Now, a technical story about X11 and DPI scaling. The article shows that X11, often said to be bad at DPI or fractional scaling, can actually do it. The author wrote a program to draw a circle that stays the same real-world size on any monitor, using OpenGL and info from the X server. The program even works across the network, showing X11’s remote features. The main problem is that sometimes the monitor’s size info isn’t correct. In the comments, people agree it’s good to try things yourself, but say the hard part is scaling full apps, not just one shape. Most apps and toolkits don’t handle scaling well, and that’s why new systems like Wayland are being adopted. There’s debate about fractional scaling, with some saying it always makes things look blurry, while others don’t mind. Many defend X11 for remote use, while others say Windows and macOS handle mixed-DPI setups better. In the end, people agree that scaling is hard, but it’s worth understanding the tech by trying things yourself.

Next up is plastics in our food. PlasticList is a website that lists how much plastic and plastic chemicals are found in different foods and drinks, from baby food to snacks to water. The site gives the names and amounts of chemicals found, and warns that the numbers come from only a few samples. Foods in glass jars tend to have lower numbers, while those in plastic wrappers have more. Even “healthy” foods can have plastic chemicals. The site says these numbers are just a starting point and don’t always mean there’s a real health risk. In the comments, people talk about how plastic is everywhere—in food, water, kitchen tools, and even clothes. Some worry about things like plastic pepper grinders, while others try to use metal or glass instead of plastic. There’s debate about what the real risk is—some say there isn’t enough proof these small amounts are dangerous, while others warn it’s risky to wait for perfect proof. Some joke about a future of “microplastic-free” marketing. Overall, people are concerned but also unsure what to do, and want more research and better rules.

We also have a story about the U.S. National Archives in College Park, Maryland. This large building keeps important government records, and soon it will become a restricted federal facility. Only people with a clear research purpose and a researcher card can enter. The Archives already had strong security, but now the rules are stricter: visitors must apply for a card, show ID, and give a reason for their visit. Some worry that the rule about “legitimate business purpose” is too vague, and could be used to block people. Others say these rules are normal for rare collections and help protect documents from theft or damage. There’s debate about whether the changes are political, just about security, or due to staff shortages. Some want more records to be digitized and put online, but there isn’t enough money or staff for that. The comments show a split between people worried about losing open access, and those who think tighter rules are needed to protect history.

Moving to something fun, a developer found a hidden easter egg in the Power Mac G3 ROM—a secret group photo of the Mac team that was hidden for 27 years. Using tools like Hex Fiend and Ghidra, the author found clues in the ROM and learned that you could unlock the photo by creating a RAM disk with a special name. This trick worked on old Macs running up to OS 9.0.4. People in the comments were nostalgic for these old easter eggs, saying they made software feel more human. Some noted that company rules and security have changed, making it harder to hide surprises like this. There’s debate about whether banning easter eggs was for business, security, or just because it’s hard to credit everyone on big teams. Many agree these secrets gave old tech a unique spirit that’s missing from most modern software.

Finally, we have Subsecond, a new Rust library for hot-patching code—that is, changing code in a running program without stopping it. This is useful for things like game engines or servers, where restarting is slow. Subsecond uses a system called ThinLinking to speed up compiling, and routes function calls through a jump table that always points to the newest code. You have to wrap the code you want to reload in a special function, and when you make changes, only that part gets rebuilt and updated. It works best with some frameworks like Dioxus and Bevy, where support is built in. There are some limits: it only patches the main crate, not libraries, and if you change how data is stored, things can break. In the comments, people like the idea for faster development, but wish it was even smoother—some prefer using dynamic libraries for reloadable code. The creator answered questions and said more features are planned. Overall, the community is interested but aware of the current trade-offs.

That’s all for today’s episode. Thank you for listening to Hacker News Daily Podcast. We hope you found these stories interesting and helpful. See you next time!