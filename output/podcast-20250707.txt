Hello everyone, this is the 2025-07-07 episode of Hacker News Daily Podcast. Today, we have stories about mathematics, AI, programming tools, web security, design, nature, and even the secrets of honey. Let’s get started.

First, we begin with a big breakthrough in mathematics. Boaz Klartag, a mathematician, has made major progress on the sphere-packing problem, which asks how to fit spheres together as tightly as possible, especially in higher dimensions. For hundreds of years, this puzzle moved only in small steps, but Klartag, who was not an expert in sphere packing, used ideas from convex geometry to try something new. He revisited an old method from 1947, where you start with an ellipsoid instead of a sphere. In high dimensions, ellipsoids can be stretched in many ways, so the problem is difficult. Most experts had given up on this path. Klartag’s key idea was to randomly grow and shrink the ellipsoid along its axes, stopping growth in one direction when it touched a lattice point. This process could sometimes create ellipsoids big enough to set new packing records.

Using Rogers’ method, Klartag turned these large ellipsoids into denser sphere arrangements. His technique can pack about d times more spheres in d dimensions than earlier methods, which is a huge step forward. His work also started new debates: are the best packings always orderly and symmetric, or is disorder sometimes better? Klartag’s result suggests that order and symmetry may still be the best way.

Commenters on Hacker News are amazed that a newcomer could solve such a long-standing problem. Some say it shows the value of fresh thinking and looking at old problems from new angles. There’s technical discussion about random ellipsoid growth and the challenges of high dimensions. A few people ask if this breakthrough will help with real-world tasks like data storage or error correction, but others note that the result is more theoretical for now. Many agree that combining ideas from different math fields can lead to big progress, and hope this inspires others to do the same.

Next, we talk about Lean 4.22, a new feature in the Lean programming language that helps prove that imperative programs work as they should. The article gives a simple example: checking if a list has two numbers that add up to zero. The author shows a fast way to solve the problem, using a set to keep track of numbers as you loop through the list. Lean is mostly a functional language but now supports an imperative style, similar to languages like Python.

The big feature is `Std.Do`, which helps you write and prove properties about imperative programs using Hoare triples: if something is true before running the code, something else will be true after. To prove the program works, you need a loop invariant—a statement that is always true each time through the loop. Lean then breaks the proof into smaller steps, and the new `grind` tactic solves most of them automatically.

Lean is compared to other tools like Dafny and Verus, which use automated solvers but can be hard to debug. Lean’s interactive approach lets you finish proofs by hand if automation fails. Also, Lean’s data structures are written and checked in Lean itself, making it more trustworthy for uses like cryptography. The author believes Lean is a good tool for program verification in real projects.

Hacker News users like the clear example and are happy to see Lean moving into program verification. Some discuss how Lean compares to tools like Coq and Agda. People like having code and proofs in the same language, but some say Lean can be slow for big proofs. There are questions about practical uses, like in security, and calls for more documentation. Some ask if formal verification is practical for most programmers, but others think better tools like Lean could change that soon. Overall, the mood is hopeful that these tools will become easier to use and more common.

Our next story is about Mercury, a new large language model that uses diffusion methods for text generation. Mercury is built on Transformer technology but predicts many words at the same time, not one by one. This makes Mercury much faster than other models. There are two versions: Mini and Small. On NVIDIA H100 GPUs, Mercury Mini can write over 1,100 words per second, and Small about 740 words per second—up to ten times faster than other top models, with similar quality. Mercury is especially good for coding help and was tested by real developers on Copilot Arena, where it ranked second in quality but was the fastest overall. The model is available for use through an API or a free playground.

In the comments, people are excited about the speed and think it could make coding tools and chatbots feel much faster. Some want more details about the diffusion method. Others wonder if the high speed means more memory or power use, and if this is a problem for smaller companies. There is some doubt about quality claims, and some wish the full model was open source. Many are hopeful that Mercury’s new ideas will lead to more research and better AI tools.

Switching to a more natural topic, there’s an article explaining why honey can stay fresh and safe for years, even as other sweet foods spoil quickly. Bees remove water from nectar, add enzymes to make it acidic, and break down sugars. The result is honey with very little water, high sugar, and acid, making it hard for bacteria and mold to grow. Keeping honey sealed adds more protection, so it can last almost forever. But if honey is mixed with water or touched with a dirty spoon, it can spoil or even ferment into alcohol.

In the comments, people share stories of eating very old honey, discuss how crystallized honey is still safe (just warm it up), and mention honey’s use in healing wounds. Some warn about the risk of mixing honey with water or dirt. There are jokes about ancient honey, and some people use honey as an emergency food. Others are surprised by how much work bees do to create such a lasting food. There’s also curiosity about other natural foods that last a long time.

Moving to developer tools, Morph is a new AI-powered tool for making big code changes quickly. Morph can edit up to 4,500 tokens per second. You describe what you want to change, and Morph writes or edits code across many files. It works well with Git, so you can see and review every change. Morph focuses on practical edits, not just writing new code from scratch, and is designed to be safe—nothing is changed until you approve it. It works with many languages, and you can use it from the command line or in your favorite editor. The goal is to save developers time, especially with boring or repetitive tasks.

Commenters like Morph’s speed and the fact that it works with Git, but some ask about its accuracy and how it handles complex code. Some worry about mistakes, while others say Morph’s value depends on how well it fits into their workflow. There are questions about pricing and open source status. Some people hope Morph will be great for code cleanup or migrations, but a few are cautious, saying AI should not replace careful code review. There’s interest, but also some worry about using AI for important edits.

Next, we have a story about Pocket, the popular read-it-later app, which is shutting down. The author decided to analyze almost 900 saved articles using simple CSV tools and an AI tool called o3. They looked at topics like software, security, parenting, and personal finance, and asked o3 to guess details about their life based only on saved links.

o3’s guesses were very detailed and surprisingly accurate, including age, location, job, family size, and interests. The author was amazed at how much can be learned just from saved links. Commenters found this “scary accurate” and discussed privacy concerns. Some say this is what ad companies already do, but now anyone can try it. Others think this kind of profiling works best with organized data, and many are curious to try it with their own reading lists. Some developers suggest blending other data sources or building personal recommendation systems, but privacy worries remain. The post led to lots of talk about self-knowledge and the power of simple data plus AI.

Now for something green: the Miyawaki method, a way to plant small, dense forests quickly, even in cities or poor soils. Dr. Akira Miyawaki created this method after studying native forests in Japan. The method uses many native trees and shrubs, planted very close together in layers, making the forest very dense. Supporters say these forests can grow ten times faster and be much more biodiverse than normal plantings. The method is popular worldwide, helped by TED Talks and YouTube.

But not everyone agrees it is perfect. Some ecologists say it is too much like a one-size-fits-all recipe and can ignore the needs of local plants and soil. In some places, people plant trees where only grasslands should be, which can harm rare animals and plants. The method can also be expensive and use lots of resources, and many trees may die after ten years due to overcrowding. Some experts adapt the method to fit local conditions, calling their work “mini-forests” instead.

Commenters are excited by the idea, saying it is good for turning empty land into green space and for getting people interested in nature. But there are also warnings about planting the wrong trees or wasting resources. Some share stories of government projects that used the method for publicity, not real ecology. Many agree that planting more trees is good, but it is important to listen to local experts and not just follow trends.

Next, a story from the world of music websites. Soundslice is a site that lets people scan sheet music to listen, edit, and practice songs. Recently, many users started uploading ASCII tabs—simple text versions for guitar—because ChatGPT told them Soundslice could play these tabs. This was not true. The owner had to decide what to do. Instead of just warning users, he decided to actually build the ASCII tab importer, making the false feature real.

The owner feels strange about building something only because AI spread wrong facts. In the comments, people find the story both funny and surprising. Some say AI is now shaping what people expect from products, even when it is wrong. Others warn this could waste time or create more problems. There’s talk about how companies may need to watch what AI says about them in the future. Some think it’s clever to meet demand, but risky to follow every AI mistake. Overall, the story shows both the good and bad sides of responding to AI-driven beliefs.

Now, let’s talk about web security. The article says more people and groups should run Certificate Transparency (CT) logs, which track SSL certificates and help keep the web safe. Running a CT log used to be hard and expensive, but now it is much easier and cheaper, thanks to new tools like Static CT API and Sunlight from Let’s Encrypt. You only need basic hardware and a small team. The process is now simpler, and more independent logs will make web security stronger.

In the comments, people are happy that running a CT log is now possible for more groups. Some are surprised at the low hardware needs. There are questions about commitment and how to avoid losing data. Some wonder if big companies will still dominate, but many are excited to try running their own logs or teaming up with others. There is hope that more independent CT logs will make the web even safer.

Finally, we have a story about Figma, the popular online design tool. The article says that Figma’s new features—like Auto Layout, Smart Components, and Dev Mode—make designers work more like engineers, which can hurt creativity. Auto Layout and similar tools make everything structured from the start, so it is hard to play, experiment, or try new ideas. The author worries that this leads to all designs looking the same and makes it hard for developers to add their own ideas.

Some commenters agree, saying Figma makes it hard to experiment, and all designs start to look similar. Others say these features save time and help big teams work together. Some developers like having more structure. A few people point out that every tool shapes how people work, and maybe messy, early design should happen outside of Figma. There is a split: some miss the old, freeform design style, while others are happy with the order and speed Figma brings.

That’s all for today’s Hacker News Daily Podcast. Thank you for listening. We’ll be back tomorrow with more news and stories from the tech world.