Hello everyone, this is the 2025-07-03 episode of Hacker News Daily Podcast. Today, we bring you stories about rewriting classic tools in Rust, new ways to think about work, open-source robots, creative uses of wind power, software abstractions, Google’s push for privacy, fresh algorithms for old problems, startup hiring, advances in real-time speech translation, and what makes a city’s food scene unique.

First, let’s talk about a big hobby project: rewriting tmux, the well-known terminal multiplexer, from C to Rust. The author started with a tool called C2Rust to convert the code, but found the result hard to read and maintain. For example, named constants became just numbers, and there were too many type casts. So, the author decided to translate the code by hand, one file at a time, making sure everything stayed clear and correct.

The process was not easy. At first, both C and Rust were used together, but soon Rust became the main language, with only a few C parts linked in. This made it easier to keep things working while translating more code. During the work, the author found bugs—one was from a wrong function declaration in C, causing memory errors. Another bug came from a struct defined differently in Rust, so the data did not line up the same as in C.

Some C features, like raw pointers and goto statements, needed special care in Rust. Raw pointers are less safe in Rust, and gotos became labeled loops or blocks. The author also had to rewrite macros for data structures and rebuild the parser, moving from yacc in C to lalrpop in Rust. For editing, Vim macros helped speed up the work, and AI tools like Cursor helped a bit, but did not save much time.

Now, the codebase is fully in Rust, but not yet entirely “safe Rust.” The author released version 0.0.1 and hopes for feedback. On Hacker News, many praised the effort and the idea of a safer tmux, but warned that such a big change brings risks, bugs, and long-term work. Some discussed the best way to translate C to Rust, the problems with pointers and memory layout, and whether it’s better to aim for idiomatic Rust or just a working port. Others pointed out the need for strong testing, no matter how good the translation. In the end, people were excited, but careful, about replacing the C version of tmux.

Next, let’s look at a different way to work. The article introduces “Flounder Mode,” inspired by Kevin Kelly. Kelly is known for working on the Whole Earth Catalog, helping start the WELL, co-founding WIRED magazine, writing books, and building a clock meant to run for 10,000 years. He calls his way of working “floundering”—exploring many interests and not chasing titles or money.

The author of the article shares her own story, choosing fun projects and company culture over climbing the career ladder. Meeting Kelly, she sees that his studio is full of objects and stories. He says he just follows his curiosity, not worrying about being “great.” He believes work should be joyful, and that greatness often brings problems. This view is very different from the stressful, success-focused culture in many tech companies.

Commenters on Hacker News found Kelly’s story inspiring. Some shared their own “strange” career paths, and felt less worried about not following the usual road. There was discussion about whether everyone can work like Kelly, since financial freedom and luck help. Others said that even if you need to work for money, you can still bring curiosity and joy to your job. Many admire Kelly’s “1,000 true fans” idea, and wish more role models like him existed in tech. There was also debate about ambition, happiness, and the myth that you must suffer to achieve. Most agreed that Kelly’s approach is refreshing, and hope more people feel free to “flounder” in their careers.

Our next story is about K-Scale Labs, a new company making open-source humanoid robots. Their first robot, K-Humanoid, is about the size of a child and can walk, wave, and pick up small things. The robot uses 3D-printed parts and off-the-shelf motors, making it affordable and easy to build. The software is open source and uses ROS, a popular robotics tool. The team wants to build a community around the project, so hobbyists and schools can build and improve robots together.

On Hacker News, people were excited about open-source robotics. Some liked how easy and affordable the robot is, while others asked about safety and cost. There were questions about how strong the robot is, how easy it is for beginners, and whether it can do more complex tasks. Some shared ideas for adding sensors or cameras. A few users remembered past open-source robot projects and hoped this one lasts. Many offered to help or join the community. Overall, people are hopeful that open-source robots will bring more people into robotics.

Now let’s talk about the Wind Knitting Factory, a creative project that uses wind power to knit scarves. The machine is attached to the outside of a building, and when the wind blows, it turns big blades that drive the knitting machine. The scarf grows longer as the wind blows, and once it reaches a window, it’s pulled inside, finished, and labeled with when and how it was made by the wind. The project mixes art, engineering, and clean energy, and makes the process of making something very visible to the public.

Hacker News users called the project creative and fun. Some liked how it shows green energy in action, while others wondered about practical problems—like what happens if the wind stops or the yarn gets tangled. There were jokes about waiting for a scarf on a calm day. Some people said they would love to own a scarf made by the wind, and others shared ideas for using wind to make other things. Most agreed that the project is charming and meaningful.

Our next story is about caching in software. The article says caching is not just about speed, but is really an abstraction—a way to separate how we get data from where it is stored. Caching helps us write simpler code, because the system decides whether to get data from memory, disk, or elsewhere.

The article explains that while there are common caching rules like LRU and LFU, the real value is in making code easier to manage. Databases and operating systems use caching all the time—the page cache in the OS is a good example. But caching also brings problems, like bugs when caches are out of sync or when abstractions hide important details.

On Hacker News, many people liked thinking of caching as an abstraction, not just an optimization. Some shared stories about bugs from caching mistakes, and others said that sometimes, custom caching is better than standard rules. There was debate about how much to tune caching algorithms, and reminders that caching is not a magic fix—it can make things worse if not used carefully. Some compared cache layers to plumbing: you only notice them when something breaks. Others discussed how new hardware could change caching in the future. In the end, most agreed that caching is powerful, but needs to be used with care.

Next, Google has released its Zero-Knowledge Proof (ZKP) code as open source. This is meant to help with online privacy, especially for age checks in Europe. ZKP lets you prove things like being over 18 without showing your name or birthdate. The code is free for anyone to use, and Google worked with a big European bank to make sure it fits the needs of banks, governments, and the new digital ID systems coming to the EU.

On Hacker News, people welcomed the move, hoping it will make the internet safer and give users more control. Some worried that ZKP is hard to use and needs careful review. Others pointed out that even with good tools, companies might still collect too much data, so technology is not enough on its own. There was excitement among developers to try the code, but some questioned Google’s motives. Overall, people saw this as a good step, but called for careful testing and clear rules to protect privacy.

Another story covers a new algorithm for organizing books on a shelf—a problem also common in computer science when keeping big lists sorted. In the past, the best known way needed about log₂(n) moves to add a new book. Newer algorithms use randomness and history independence, which means the final order hides how things were added or removed, helping with privacy. The latest method reduces the cost to about log(n) times (log log n) squared, close to the theoretical best, by mixing smart responses to attacks and random timing.

On Hacker News, people liked seeing how math and real life connect. Some wondered if these ideas could help with real databases or memory systems. Others liked the idea of history independence for privacy. There was debate about using randomness in algorithms, since it can help but also makes debugging harder. Most were curious to see if these new methods will be used in practice or stay mostly in research.

The next article is a job posting from Converge, a small New York startup backed by Y Combinator. They make tools to help online stores track where their customers come from and improve marketing. With only five people, the team already has strong revenue and many customers. They are hiring a senior full-stack engineer, offering high salary, equity, and a paid trial day as part of the interview.

On Hacker News, some people were impressed by the team’s results and the chance to own an entire product. Others wondered about work-life balance and the pressure of being on a small, fast-moving team. There was interest in the technical challenges and questions about remote work. Some shared their own startup stories, saying it can be both fun and stressful. Many liked the idea of a paid trial day for interviews. Overall, people saw both risks and rewards in joining a company like this.

Now let’s talk about Hibiki, a new AI model for real-time speech-to-speech translation. The goal is to let people speak in different languages and be understood right away, with both words and voice sounding natural. Hibiki uses a “multistream language model” to handle both languages at once, listening and translating as you speak. It creates both text and audio, so it can do speech-to-text and speech-to-speech translation. The system can decide when to start translating, so you do not have to wait for full sentences.

In tests, Hibiki shows high translation quality and keeps the speaker’s voice and style. It is simple enough to run on devices, not just in the cloud. On Hacker News, people were excited about breaking language barriers, but worried about speed, cost, and how well the model handles less common languages or noisy speech. Some liked that Hibiki can run locally, helping with privacy. Others wanted to know how well it keeps emotion and style, and if it can handle jokes or slang. Technical questions about how the model aligns speech and translation were common, and many hope the technology will be open source.

Finally, we look at a fun data project about restaurants in American cities. The author used Google Places data to study what kinds of restaurants are common or rare in over 340 cities. He built a picture of the “average” city, called “New Springfield,” and found that about 20% of restaurants are fast food, about a third are “American,” and the rest are international, with Mexican, Chinese, and Italian being most common.

He found that big cities often have more restaurants, but not always as many as expected—creative cities like Austin or San Francisco have more, while some big cities have less. Some small cities have surprising restaurants, often due to local immigrant or student groups. The author also notes limits in the data—Google categories can be messy, and some cuisines are missed.

On Hacker News, people enjoyed the idea and shared stories about finding rare restaurants in unexpected places. Some said Google’s data is not perfect, and that self-labeling by restaurants can change the results. Others liked the open-source approach and wanted to play with the data. There was debate about what makes a city’s food scene “average” or “special,” with some saying unusual places are more interesting than the typical ones.

That’s all for today’s episode. Thank you for listening to the Hacker News Daily Podcast. We hope you enjoyed these stories and the ideas from the community. See you next time!