Hello everyone, this is the 2025-07-23 episode of Hacker News Daily Podcast. Today, we have a great mix of stories for software developers, hardware hackers, and tech fans. Let’s get started.

First, let’s talk about CARA, a robot dog built by Aaed Musa. This robot stands out because it uses ropes and capstan drives for its joints, instead of the usual gears or pulleys. Capstan drives are very rare in robot dogs, but they give some big benefits: no backlash, high torque, and quiet movement. The builder worked hard to get the joint ratios just right, needing an exact 8:1 ratio. At first, he measured the wrong part of the drum, which made the ratio off. After getting feedback, he learned to measure where the rope touches the drum, called the effective diameter. Even then, the rope’s softness made the math tricky, so he tested two drives, measured their ratios, and used math to figure out the perfect drum size. In the end, he got a ratio of 8.000619:1, which is very close.

CARA uses a strong 5-bar linkage design for its legs, making it compact and powerful. Each joint uses strong Dyneema rope and pancake motors. Most parts are 3D-printed, with carbon fiber tubes for the frame. A Teensy microcontroller handles the electronics, with a CAN bus to connect the motor controllers. It can be driven by radio control and uses a 24V battery. In total, it weighs about 14 kg and cost about $3,300 to build.

Programming for the robot includes routines for finding the home position, smooth kinematics, and a trotting gait where diagonal legs move together. CARA can keep its body level on slopes and recover from pushes, using an IMU sensor to help with stability. The software tweaks the robot’s pose in real time.

The builder wants to improve CARA with a bigger battery and tougher feet, since the current ones wear down fast on concrete. He also wants to add wheels, a camera, or more sensors, and maybe make it more autonomous in the future. There are plans for a smaller, easier-to-build version that others can follow.

In the comments, many people praised the clever use of capstan drives and ropes. Some were surprised by how precise and quiet the robot is without gears. Others discussed technical challenges like measuring the rope diameter and dealing with rope stretch over time. A few wondered about the long-term durability of rope-driven systems, while others suggested new rope materials or protective covers. The cost was also discussed—$3,300 is high for a hobby, but much lower than commercial robots. Some asked about open-sourcing the code and CAD files, and others shared tips for tuning the gait and improving stability. Overall, the project is seen as inspiring and full of lessons for robot builders.

Next, let’s look at The Promised LAN, a private, always-on LAN party network for friends. This network has been running since 2021 and is invite-only. It connects different LANs through a special backbone network. Each group only needs to connect to a local backbone node, making management easier. The backbone uses three main nodes with Debian or OpenBSD, all linked with secure IPSec, using AES 256 and Curve25519 encryption. The backbone has its own IP space, and nodes share routing info using BGP.

For naming, The Promised LAN uses its own top-level domain, ".tpl". Each LAN gets its own domain, and three root DNS servers keep services running even if one fails. Every LAN runs its own DNS server at a fixed address, and DNS settings are shared using a git repository. For security certificates, they run their own CA system, with three-year certificates handled automatically via DNS.

Many people in the comments loved the idea, saying it brought back memories of old LAN parties. Some were impressed by the technical setup, while others asked why not just use Hamachi or Tailscale. Supporters said this project is more private and flexible. Some worried about the complexity for new users or the risks of running your own DNS and CA. Others praised the use of strong encryption and open source tools. There were questions about what games or activities they run, and some people wanted to join or build their own version. The community’s response was a mix of nostalgia, technical interest, and curiosity about how this could scale for other groups.

Now, a quick tip from science: a new study says you do not need to let meat reach room temperature before cooking. Many cooks used to wait 30 minutes or more for meat to warm up, thinking it would cook more evenly. Researchers tested this by cooking meat from the fridge and meat that had been left out. The results showed almost no difference. Both types of meat cooked in about the same time, tasted the same, and were safe to eat. The only real difference was that fridge-cold meat took a tiny bit longer to cook. Most people in the comments were happy to skip the waiting step. Some cooks said they always cooked meat straight from the fridge anyway. A few still argued that for perfect steak, letting it sit out might help, but most agreed it’s not important for daily cooking. Some pointed out that it’s safer not to leave meat out too long. Many thanked the researchers for testing this old rule, and overall, people were glad to make cooking a bit easier.

Our next story is a fun bit of history: after landing on the moon, the Apollo 11 astronauts, including Neil Armstrong, had to fill out a U.S. Customs form when coming back to Earth. They listed their departure point as “Moon” and the flight number as “Apollo 11.” They declared moon rocks and moon dust as items they were bringing in. The form also asked about plants, animals, food, soil, and even snails, just like for any normal traveler. For health, they wrote “To be determined,” since no one knew if moon dust could spread disease. People in the comments found the form funny and a bit strange. Some thought it was a joke at first, but others explained it was real and showed how careful the government was. Many enjoyed the weird details, like asking about snails. Some wondered if astronauts still fill out forms like this today. Others joked about what would happen if they had checked “yes” for bringing in diseases. Overall, the story was seen as a fun and interesting look at government rules and space history.

Moving on to software, a new Go library called “hyperpb” makes parsing Protobuf much faster. Usually, Go Protobuf parsers generate code for each message type, which is fast but can make programs slow when there are many types. The C library UPB solves this by using a table-driven parser, like a small virtual machine. Hyperpb brings this idea to Go and adds more tricks, like zero-copy for strings and bytes, smart memory use with arenas, good guesses for repeated fields, and custom maps that are faster than Go’s built-in maps. It also stores “oneof” fields more efficiently.

Hyperpb is fully dynamic, so you do not need to generate code ahead of time. It beats other Go parsers in benchmarks, including vtprotobuf. The API is simple: you compile a message type, make a message, unmarshal data, and validate it. Writing or mutating messages is not supported yet—the main focus is on reading.

In the comments, many were impressed by the performance and technical details. Some liked that hyperpb uses modern CPU tricks and explained why indirect calls can be faster than switches. Others were glad to see a pure-Go solution, since Go’s C FFI can be slow and awkward. Some wanted to know more about memory safety and arena use. There were questions about future support for writing messages and if this approach could work in other languages. Some worried about complexity and ease of debugging, while others praised the clear docs. There was debate about how much optimization is needed, but many thought hyperpb is great for high-load systems. Several users were eager to try it in their projects.

Now, let’s talk about new planets. Astronomers found five rocky planets around a small red star called L 98-59, just 35 light-years from Earth. They confirmed a fifth planet in the “habitable zone,” where water could exist and maybe life. The team used data from NASA’s TESS, ground telescopes in Europe, and the James Webb Space Telescope. The smallest planet is even smaller than Earth, and another seems to be a “water world,” with more water than any planet in our Solar System. Two of the inner planets could have volcanoes like Jupiter’s moon Io. The orbits are almost perfectly round, which is good for future study.

Researchers used new methods to get more details from old data, letting them find the fifth planet without needing new telescope time. The team hopes to use JWST to study the planets’ atmospheres and look for signs of life.

People in the comments were excited by the discovery and the idea of a “water world.” Some wondered if planets around red dwarfs can really keep their atmospheres, since those stars are often very active. Others liked that new methods let us keep finding things with old data. There were comparisons to the TRAPPIST-1 system, and debates about whether these planets can keep water for billions of years. Overall, people were excited about the science and hopeful for finding more habitable worlds.

Next, we have an article about AI tools and how we build them. The writer says we are building AI the wrong way. Instead of helping people learn and work together, most AI tools just do the task after a button click. This means people lose the chance to think and get better at their work. The article says learning is about knowing the steps, not just the facts, and that most new ideas come from groups working together. AI should act more like a teacher: explain, show, guide, and help you improve, not just do the work for you.

In the comments, many agreed that letting AI do too much can make people forget how to do things themselves. Some shared stories about tools that make things too easy and lead to mistakes. Others liked the idea of AI as a helper, not a replacement. Some said sometimes you need fast automation, but people should still know the process. There were also worries that companies will not build tools this way, because it is easier to sell tools that do everything. A few warned that if we remove humans from the loop, we might end up with systems no one understands or can fix. Most agreed that human-focused AI is the best path.

For Linux users, Debian 13 “Trixie” is coming in August 2025. This new version brings updated packages like Python 3.13, GCC 14.2, Node.js 20.19, Docker 26.1, and Linux kernel 6.12. Some packages like Asterisk are still missing. There’s a new tool called debian-repro-status to check if your packages are reproducible, which helps with security. Pacemaker’s fence-agents are now split into separate packages, so you need to install fence-agents-all for all features. The usrmerge process is finished, and apt is now version 3, bringing color output, a new solver, and new commands. The old apt-key is gone, so managing repo keys is different now.

Systemd is now version 257, with new features and tools. Some changes, like new network interface naming, may break old scripts. There are new utilities for running commands as another user and checking power status. The Linux kernel brings better hardware support and new syscalls. Kernel modules are now xz-compressed. The ntfs driver is now ntfs3. Prometheus and exporters are updated, and in virtualization, Docker, QEMU, Podman, and LXC have new versions. Vagrant’s future is unclear due to license changes, and VirtualBox is not in stable because of security issues.

OpenSSH is now version 10.0. DSA keys are not supported anymore, and some files are no longer read for security reasons. OpenSSH now uses a hybrid post-quantum algorithm by default. There are new configuration and security features too.

In the comments, some said Debian upgrades are usually smooth, but warned to read the release notes for breaking changes like network naming and missing apt-key. There were worries about package delays and slow support from some upstream projects. Some users liked the new apt color and systemd tools, while others worried that too many options could confuse new users. Some wondered if Debian can keep supporting so many architectures and packages. Others praised the community for keeping everything working. There were complaints about VirtualBox, and many agreed that reading the full release notes is key. Overall, Trixie is seen as a solid release, but admins should plan upgrades carefully.

Finally, we have “TheProtector,” a free Bash script for Linux that helps admins watch for threats and respond in real time. It checks running programs, network traffic, file changes, and user actions. If it finds something bad, like a strange process or hacker activity, it can block IPs, stop harmful programs, and keep copies of infected files. It can spot malware using YARA rules and learn what “normal” looks like on your system. There’s a web dashboard, and you can export data in JSON. It’s easy to install, runs on most Linux systems, and uses common tools like Bash, curl, netstat, and cron. It’s light on memory and CPU, but only runs on Linux and works best with root access. The creator hopes it helps people who can’t afford expensive security tools.

In the comments, many liked the idea of a simple, open-source security tool. Some praised the setup and focus on real response, not just alerts. Others worried about using Bash for security, since scripts can be easier to attack or break. There were concerns about running as root and how it avoids being tricked by hackers. Some suggested adding more logging or using Go or Rust in the future. Others pointed out that even a basic tool is better than nothing, especially for small businesses or home labs. People also talked about how security should be for everyone, not just big companies.

That’s all for today’s episode. Thank you for listening to Hacker News Daily Podcast. We hope these stories give you new ideas and help you see what’s happening in the tech world. See you next time!