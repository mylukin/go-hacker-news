Hello everyone, this is the 2025-10-24 episode of Hacker News Daily Podcast. Today, we have a lot of exciting tech news and creative stories to share with you.

First, Swift has released an official SDK for Android. This is big news for developers because Swift was mostly used for Apple platforms before. Now, you can write Android apps using Swift. The SDK is available as nightly previews for Windows, Linux, and macOS. There’s a simple guide to help you start your first Swift app on Android, and some example projects show how everything works. About a quarter of Swift packages already support Android, and there’s a showcase to help you find them. Developers can use a tool called ‘swift-java’ to connect Swift and Java code. This makes it easier to build real Android apps that mix both languages, and it can generate the needed code automatically. The team asks developers to join the community, share ideas, and follow updates on forums and project boards. They are also working on a vision document to guide future development.

In the comments, many people are excited about this step. Some think it will be easier for teams already using Swift on Apple devices to work on Android. Others wonder if Swift can become popular on Android, since most developers there use Java or Kotlin. Some worry about how well Swift will work with Android tools, and if there will be support problems. Developers like the idea of sharing more code between iOS and Android to save time. Others point out that other languages have tried to enter Android before but did not get popular. There are questions about which apps will benefit most and if companies will really switch to Swift. Some are also interested in the technical side, like how good the Java-Swift connection is and if performance is as good as native apps. Overall, people feel hopeful but cautious and will watch how this project grows.

Next, there’s a fun story about a developer who built a website where strangers can send messages that print out on a receipt printer at his desk. He used an old Epson thermal printer connected to a Raspberry Pi. The printer uses ESC/POS commands and prints by heating special paper, so it never needs ink. Because the printer is old, he could not use normal drivers, so he connected it to the Pi, which lets him send data directly. The website is made with PHP and Laravel. It checks messages for length and valid characters, since the printer only supports basic letters and numbers. Messages are saved in a database in case the printer stops working. The site runs on the Pi in a Docker container, and Cloudflare Tunnels makes it reachable from anywhere.

After sharing his project online, people from all over the world sent more than a thousand messages—jokes, poems, ASCII art, and greetings. He started pinning the locations of senders on a world map. Most messages were friendly, and people liked sending something physical and anonymous. In the comments, users praised the playful idea and the mix of old tech with the internet. Some discussed the technical setup, shared tips for handling characters, and suggested new features like printing images. Others worried about spam, but the author said most messages were positive. Some suggested the idea could be used for art projects or in public spaces. A few shared their own similar experiments, saying it’s a great way to learn about hardware and networks. Overall, people saw it as a creative and joyful project.

Now, let’s talk about Valetudo. Valetudo is open-source software that lets you use your robot vacuum without sending data to the cloud. The creator made it to keep his vacuum working locally and protect privacy. Valetudo started in 2018 and now works for thousands of users, but there is no company behind it—just a hobbyist and some helpers. The software does not collect any data, so the creator does not know how many people use it. There’s a guide to help you buy a robot that works with Valetudo, and the code is free to use and change, but you should not sell it as your own. The project is compared to a private garden—anyone can visit, but you must respect the rules. If you do not like it, you can leave or make your own version.

On Hacker News, many praise Valetudo for giving people control over their devices. Some hate that normal vacuums send maps of their homes to companies in other countries. Others like that Valetudo is simple and just works after setup. Some say installing it can be tricky, and not every vacuum is supported. Others wish more smart devices had options like this. Some warn that updates and support might be harder with community projects, and big companies could try to stop it. But most users are glad to see a private, local option and hope more devices will offer privacy in the future.

The next story is about MRI contrast agents and a new study on their safety. MRI scans often use agents with gadolinium, a metal that helps make scans clearer. Usually, gadolinium is safe and leaves the body quickly, but the study found that in some people, it stays in the body for years, building up in the brain, kidneys, blood, and urine. This can cause health problems like nephrogenic systemic fibrosis. The study explains that gadolinium can react with oxalic acid, which comes from some foods and is made after eating vitamin C. This reaction can free gadolinium from its safe form and create tiny metal particles that enter cells and may cause harm. The lead researcher even avoids vitamin C before getting an MRI with contrast.

The study found that even one MRI with contrast can leave gadolinium in the body, and some people hold onto more gadolinium than others. The researchers are starting a registry to collect data from patients and study who is at risk. In the comments, some users were surprised and worried, especially if they or their family had MRI scans before. Others said the risks have been known for years, but this study adds new details. Some think MRI contrast is still important for health and should not be avoided without reason. Many want more research and better rules for using gadolinium. Some shared personal stories, both good and bad. Overall, there is a mix of caution, worry, and hope that this research will make medicine safer.

Now, let’s look at some interesting math news. Mathematicians have found a new shape called the "Noperthedron," the first known shape that cannot pass through a hole bored in a copy of itself. For hundreds of years, people thought every convex polyhedron had this “Rupert property”—meaning a copy could pass through a hole in itself. The story began when Prince Rupert made a bet in the 1600s about cubes, and over time, more shapes were shown to have this property. But now, with computers and new math ideas, two mathematicians have proven that the Noperthedron, with 90 corners and 152 faces, does not have the Rupert property.

The key idea is about the “shadow” a shape makes when light shines on it. If a shape’s shadow can fit inside another shadow in a certain position, it can pass through. For the Noperthedron, no such position exists. Many users on Hacker News found the story fascinating and loved how a simple question led to deep math. Some wondered if there are more shapes like this, while others liked the mix of history and modern tools. Some talked about 3D printing the shape for fun. While some asked about practical uses, most agreed that the joy of discovery is enough, and this keeps math interesting.

Next, we have a story about the Smith chart, a tool used in electrical engineering. The article explains the math behind it, especially how a Möbius transformation, f(z) = (z−1)/(z+1), turns a normal grid into the circles and lines on the Smith chart. This function changes straight lines and circles into other lines and circles. The imaginary axis becomes the unit circle, and the right half of the grid maps into the inside of this circle. Vertical lines become circles touching the unit circle at one point, and horizontal lines mostly turn into other circles. Because Möbius transformations keep angles the same, vertical and horizontal lines cross at right angles.

Commenters liked the clear explanation and said it helps demystify the Smith chart. Some shared that they used Smith charts as tools but never thought about the math behind them. Others said that understanding these transformations helps in many areas of math and engineering. Some discussed if more engineers should learn this math, or if it’s enough to know how to use the tool. There were also links to more resources for those who want to learn more. Overall, people enjoyed seeing the math behind a familiar tool.

Now, let’s talk about perfect hash functions. The article explains how to make a perfect hash for a fixed set of strings, like CSS keywords, to map each string to a number quickly. The author wrote code that does this faster and with less code than the standard tool, gperf. The main idea is to split strings into groups by length, then use a “magic” number, borrowed from chess programming, to multiply bytes from the string and shift bits to get an index. If the right magic number is found, every string gets a unique index. The code checks the string at that index to confirm, then returns the answer. If no good magic number is found, the code tries new ways to split the group.

Many people in the comments liked the technical details and examples. Some pointed out that the “magic” number approach is clever and well-known in chess engines. Others asked about handling larger sets and discussed the trade-offs—fast and small code, but more complex builds. Some wondered if the extra speed is needed, since normal hash tables are usually fast enough. Others liked that the method is portable and not tied to special hardware. Some thanked the author for sharing and said it helped them learn more about perfect hashing.

Next, there’s a job posting from Conductor, a small startup in San Francisco. Conductor helps engineers run many coding agents at once. The company is hiring its fourth team member as a founding engineer, offering good salary and stock options. The founders, Charlie and Jackson, have backgrounds at Point72 and Netflix. Their tool is used by teams at YC, Linear, and Notion, and helps users parallelize their work to make it faster. The team is small and works in person in San Francisco. They offer health care, 401k matching, and flexible work. The company values creative people who like building things and talking to users. The main language is Typescript, but experience is not required. The hiring process has an application, a call, and a short trial.

In the comments, some users found the job exciting because of the small team and big impact. Others worried about the cost of living in San Francisco. Some wanted to know more about how Conductor works. There was talk about the trend of early startup hires getting lots of responsibility, which can be both good and risky. Some liked the focus on health and work-life balance. Overall, people were excited but also careful about the usual risks of startups.

Twake Drive is our next topic. It is a free, open-source project like Google Drive, but you can run it on your own server. You download the code from GitHub and start it with Docker or set it up by hand. It needs Node.js and MongoDB. The setup steps are clear, and the app runs on port 3000 by default. The project uses the Affero GPL v3 license, so it’s free to use and change, but you must share your changes. Twake Drive is still in active development, with many updates and a growing community on GitHub.

In the comments, some people are happy to see a self-hosted Google Drive alternative and like controlling their own files. Others worry about the setup being harder than just installing Dropbox. Some ask about features like syncing and mobile apps. A few say open-source projects often miss polish and good user experience, but others remind that open source needs help and feedback to get better. Some suggest it’s good for teams or businesses, but maybe not for less technical users. There are also questions about security and update speed. Overall, people are glad to have more choices outside big tech companies.

Now, let’s talk about formalizing mathematics with tools like Lean. The article says formalizing math is useful for more than just catching errors. The author enjoys using Lean to write math proofs, comparing it to solving puzzles. He says formalization gives more value, like TypeScript does for JavaScript—it helps build better tools, lets teams talk about designs, and shows problems right away. With Lean, mathematicians can look up definitions fast, search for theorems, and refactor proofs, just like programmers do with code. It also shows which proofs depend on others, helping people discover new paths and see how math fits together.

Some people in the comments agree that formalizing math gives many benefits beyond finding mistakes. They like the idea of better tools and making math more like software engineering. Others think writing every small proof takes too much time, and not all mathematicians want to learn new tools. Some worry it could slow down creative thinking. But many are excited, saying as tools get better, more people will want to use them. Some share their own stories of using proof assistants and finding them helpful for learning or teaching. There is hope that these changes will make math more reliable and open for everyone.

That’s all for today’s Hacker News Daily Podcast. Thank you for listening, and we’ll be back tomorrow with more news and stories from the world of technology and software development.