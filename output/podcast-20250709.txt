Hello everyone, this is the 2025-07-09 episode of Hacker News Daily Podcast. Today, we have a mix of new open source projects, software security stories, and technical deep dives. Let’s get started.

First, let’s talk about MCP-B, a new tool that changes how AI interacts with websites. Instead of acting like a robot that clicks buttons and reads screens, MCP-B lets AI assistants use a website’s real functions, much faster and more directly. The setup is simple—just add about 50 lines of code to your website, and AI tools can use your site’s APIs without extra steps like API keys or OAuth. The system uses your browser’s current login, so there are no new security steps. This makes tasks run in milliseconds instead of seconds or minutes. MCP-B also avoids screen-scraping, so things won’t break when the website changes its look. AI gets structured data, making automation more reliable.

The tool is open-source and focused on privacy. All processing happens on your device, and your data does not leave unless you allow it. MCP-B supports cross-application workflows and lets other AI extensions connect too. In the comments, many people are excited about how simple and fast this makes browser automation. Some think it could become a new standard for letting AIs work with web apps. But there are also concerns about security—what if a bad extension uses MCP-B to get private data? Some developers like that it saves time by removing complex OAuth setups, while others wonder if website owners will want to add the MCP-B code. Overall, people like the speed, ease of use, and new approach.

Next, we have Biomni, an open-source AI agent from Stanford, made for biomedical research. Biomni uses large language models, retrieves data, and runs code to help scientists plan experiments, analyze data, and even suggest new research ideas. You set up a Python environment, install Biomni, and add your API keys for models like Claude or OpenAI. Then you can ask it to plan a CRISPR screen, annotate single-cell RNA data, or predict drug properties using natural language. Biomni comes with a large data lake and has a no-code web interface for people who don’t want to use code. The project is open to contributions, and top helpers get credit in future papers. The team is working on a new version and invites more people to join.

In the comments, people are excited to see an open AI agent for biomedical science, and they like that tools and datasets are shared. Some worry about the heavy setup and need for powerful hardware, which might make it hard for small labs or students. Others point out that relying on paid AI models and API keys could limit access. There are questions about how well Biomni works compared to human experts, and how to avoid mistakes in research. Many like the clear documentation and open science focus, but ask for more examples and easier ways to get started. Overall, Biomni is seen as an exciting step for biomedical research, with hopes for more open models and easier access.

Now let’s look at Tree Borrows, a new idea for handling ownership and pointer safety in Rust, especially when using unsafe code. Rust is known for strong safety, but sometimes programmers need to use “unsafe” code, which can break those guarantees. The old model, Stacked Borrows, was too strict and blocked some common Rust code. Tree Borrows changes the system from a “stack” to a “tree,” making it accept more real-world code. When tested on 30,000 popular projects, it rejected 54% fewer cases than the old model. Tree Borrows allows most compiler optimizations and even some new ones, and the rules have been proven sound with a tool called Rocq. This work won a Distinguished Paper Award at PLDI 2025.

In the comments, people are excited that Tree Borrows could make unsafe Rust code easier to use. Some point out the rules may be harder to understand or teach, and worry about complexity and tool support. Others ask if this will help with common Rust problems like aliasing or FFI. There’s debate over whether looser rules will let in more bugs, or if they just match real programming. Some are curious if this will come to stable Rust soon. Most agree it’s an important and useful update for Rust.

Shifting gears, we have a story about language: the DCHP-3, a dictionary of Canadian English, and how it sorts “Canadianisms.” The dictionary breaks words into six types, like those that started in Canada, are kept only in Canada, or changed meaning there. Examples include “garburator,” “pencil crayon,” and “toque.” Some words are special to Canadian culture, like “universal healthcare” and hockey terms. The dictionary gives each word a label, shows where it’s used, and includes real examples. Charts show how often and where words are used, and labels explain if words are slang, formal, or linked to certain places.

Commenters say this is a great resource for learning about Canadian English and culture. Some are surprised by words like “pencil crayon,” and others share stories about moving to Canada and learning new words. There are discussions about how language changes fast, and how the dictionary tracks both fun and serious parts of life. Some debate what counts as a true “Canadianism,” and ask about how the words are counted. Overall, people are interested in how language shows history and culture.

Next is FlopperZiro, a simple, do-it-yourself clone of the Flipper Zero device, but cheap and open source. The creator built it for fun, using the Arduino IDE and common parts like an STM32 microcontroller, radio chips, an RFID chip, OLED display, SD card slot, and battery. The device can read and copy IR and RF remote signals, save them, and send them out again. RFID/NFC support is still being finished. You can save data to SD, see battery and memory info, and use menus to control everything. The shell can be 3D printed, but the design is not done yet. The project is open source, but just a hobby, not a real Flipper Zero replacement.

In the comments, people are happy to see a low-cost, open clone, and think it’s a good learning tool. Some say Flipper Zero is hard to buy now, so a DIY version is welcome. A few worry about misuse, but most agree that learning should not be blocked. Some ask about build guides and kits, and others share ideas to improve the hardware or code. Many thank the creator for sharing and offer to help or suggest better documentation.

Now let’s talk about jank, a new programming language like Clojure, but running on C++ and LLVM instead of the JVM. jank wants to give the interactive and functional style of Clojure, but with faster native code and smaller runtimes. The language is very close to Clojure, supports code-as-data and macros, and has persistent, immutable data structures. You can also use C++ code inside your Clojure files and mix the two. jank uses LLVM for just-in-time compilation, so code runs fast and creates small programs. Error messages are clear, and jank plans to support popular tools like Leiningen and LSP.

There are code examples for looping, calling OpenGL, making indexes, and more. In the comments, people are excited to see Clojure without the JVM, especially for small programs or games. Some are cautious, pointing out that making a new language is hard and wonder about library support and Windows compatibility. Many praise the clear error messages and the power of mixing C++ and Clojure, though some worry it could make code harder to read. There’s talk about tooling and the risk of fast language changes, but overall, people are hopeful and interested.

Another project connects Anna’s Archive, a large document and book archive, with MCP clients like Claude Desktop, making it easy to search and download documents. You use an MCP client, get an API key from Anna’s Archive (by donating), and set two environment variables for setup. The project is written in Go and shell scripts and is only for legal use, like public domain or Creative Commons works.

In the comments, users like that this makes Anna’s Archive easier to use. Some ask about legal risks, since the site has both legal and illegal content. There are questions about the need for an API key and donations, with replies explaining it helps support the archive and stop abuse. Some share tips for running the tool, while others worry about the project’s future if the site faces legal trouble. Privacy is also a concern for some users. Overall, people are interested, but remind others to think about copyright and privacy.

Next, Petrichor is a new, free, open-source music player for macOS that works offline. It lets you map music folders, browse, create playlists, and manage your queue. You can pin albums or playlists, use folder view, and quickly search big libraries. The app uses macOS features like playback controls and dark mode. It does not change your files—just indexes and reads them. Planned features include smart playlists, AirPlay 2, a mini player, and more.

Hacker News users are happy to see a new offline music player, since good options for macOS are rare. Some worry about needing macOS 14, as some older Macs can’t upgrade. Users like that files are not changed, and folder structure is kept. There are requests for more features, and questions about handling large libraries and metadata. Some still use iTunes or Swinsian, but hope Petrichor can become a strong alternative. The open-source nature and clean interface are praised, and some hope for an iOS version. Overall, people are happy, but have many ideas for future updates.

Now to a technical deep dive: a new, faster way to detect if two 3D shapes are colliding. The method improves the Separating Axis Test, or SAT, used in games and physics engines. Usually, SAT checks lots of possible separating directions, using the faces and edges of the shapes. By using the Gauss map—a way to show all face normals on a sphere—you can find which faces or edges matter for collision and skip extra calculations. You only do one big math step, then update your answer cheaply as you move to new regions on the sphere.

Tests show this new method is 5 to 10 times faster than the old SAT for shapes with many faces. For shape vs triangle, it’s about 1.2 times faster. There are still some small bugs, but they can be fixed. In the comments, people are excited about the speed boost and want to try the code. Some ask about edge cases and floating-point errors, and others share similar ideas from other engines. Most agree it’s a clever and useful improvement, and hope to see it in more open-source projects.

Finally, we have a big security story about McHire, the job application system used by most McDonald’s restaurants. Researchers found two serious problems: first, the admin login used a very weak default password—just “123456” for both username and password. Second, there was an “IDOR” flaw in the API, which let anyone with access see the personal details of any job applicant, just by changing a number in the web address. This included names, contact info, and work preferences for 64 million people.

The company, Paradox.ai, fixed the problems quickly after being contacted. In the comments, people are shocked that such weak passwords were allowed. Some blame third-party systems and chatbots for making security risks worse. Others point out that IDOR bugs are common and easy to miss. There are worries about how much information job applicants have to give, and how hard it is to report bugs to big companies. Some debate whether McDonald’s should be punished, or if fast fixes are enough.

That’s all for today’s episode. Thank you for listening to Hacker News Daily Podcast. We’ll be back tomorrow with more tech news and community discussions.