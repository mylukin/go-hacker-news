Hello everyone, this is the 2025-08-20 episode of Hacker News Daily Podcast. Today, we have a rich list of stories for software developers and tech enthusiasts, covering everything from 3D math and AI tools to privacy-focused editors and new battery designs. Let’s get started.

Our first story is about moving objects along a spherical helix path in 3D space, using math and creative visualization. The author started with simple 3D movements on the x, y, and z axes, using cosine and sine functions to show how objects like cubes can move back and forth, form circles, or even spirals. When the z-value also changes with time, and x and y are multiplied by another sine function, the path becomes a spherical helix, wrapping around a sphere instead of going out forever. All these paths use parametric equations, which make it easy to create not just circles or spirals, but also very complex shapes.

Many readers in the comments said they enjoyed the clear, step-by-step visuals, with some mentioning that 3D math often feels hard, but this article made it simple and even fun. There were tips on making the code smoother, such as using quaternions or advanced math libraries. Some shared their own 3D path experiments with tools like Three.js and Blender, and others discussed possible uses in games or simulations. One question was about real-world uses for spherical helices—someone replied that they show up in nature, like in DNA, or in antenna design. Several people wanted more interactive controls to play with the equations. Overall, readers agreed that visual and hands-on learning is the best way to really understand math like this, and that the article is great for beginners curious about parametric equations.

Next, we look at a detailed article on the AT Protocol, which powers Bluesky, the new social network aiming to connect many different apps and services. ATProto is built around “records,” which are things like posts, likes, and profiles. Each user owns their records, which are tied to a permanent DID, or Decentralized Identifier, not their username. Images and videos are stored separately as “blobs.” The protocol uses a “lexicon” to describe the data structure for each record type. All the user data is stored in a repository, shared between servers using AT URIs, and accessed through XRPC APIs. “Facets” mark up rich text for hashtags, mentions, and links.

ATProto’s server roles include the Personal Data Server (PDS), which stores your data, the Relay server that combines data from many PDSes, and the AppView server, which processes and serves data to clients. There are also tools for moderation and custom feeds. Because everything is tied to a permanent DID, users can move their accounts between servers without losing data. Most of the system is open source, though some big-scale parts, like AppView’s data handling, are not yet fully public.

In the comments, users liked the clear explanation and compared ATProto to ActivityPub, pointing out differences in data ownership and account migration. Some questioned if the server setup will really bring decentralization, or if most people will just use Bluesky’s main servers. There was talk about the technical choices, such as using CBOR for records and Merkle trees for storage—some liked the modern approach, others worried about complexity. Privacy and moderation questions came up, especially about what happens if a server goes down and whether users truly control their data. Developers were interested in the custom feed system, and some worried about closed parts of the code. Many shared links to SDKs and tools, and praised the friendly developer community.

Our next story is about Zedless, a new fork of the Zed code editor, with a strong focus on privacy and working fully offline. Zedless removes all cloud services you cannot run yourself, turns off telemetry and crash reports, and lets users choose their own network features if they want—by default, everything stays local. Contributors are not required to sign over copyright, making it safer for open source developers. All dependencies must have clear, open licenses, and the project uses tools to check this before merging code. Zedless is AGPL-licensed and welcomes help from others.

In the comments, many people were excited for a local-first, privacy-focused code editor, saying they dislike telemetry and closed cloud features in modern tools. Some noted that keeping everything local might make advanced features like AI assistants or real-time collaboration harder, but others said privacy is more important. There were questions about keeping up with upstream Zed changes, platform support, and the need for local-only plugins. Some worried that removing crash reporting could slow down bug fixing, but others said open source users can report bugs themselves. Users also hoped Zedless could inspire more privacy-respecting software, and many said they’ll watch the project as it matures.

Moving on, we have a project that lets you build the Gemma 3 270M language model from scratch using only PyTorch. The author provides Jupyter notebooks that run on most laptops with 2 GB of RAM, making it easy to learn how these models work. One notebook covers the basic model, and another adds a “KV cache” to speed things up by saving past results. Speed tests show that the model can go from 8 tokens per second to over 200 with these optimizations, even on normal hardware. There’s also a comparison with other small models like Qwen3 0.6B, and links to more articles about how these models are built.

Hacker News readers liked the clear, readable PyTorch code, saying it helps them understand how language models really work. Many were happy that the model is small enough to run on normal computers, making it easy to experiment. There was discussion about the value and complexity of KV caching, and some said projects like this make AI more open and accessible, even if small models aren’t very useful in production. PyTorch is still a favorite for researchers, even as production code moves to other systems. Ideas for more optimizations and running on old hardware were shared in the comments.

Next, we have PlutoPrint, a Python tool for turning HTML or XML into PDF files or images like PNG. PlutoPrint uses PlutoBook for rendering and is made for creating reports, invoices, or snapshots of web content. It’s easy to install, with prebuilt binaries for Windows and Linux, and you can use it from the command line or in Python code. PlutoPrint can work with Matplotlib to generate charts and embed them in documents, and you can style everything with CSS. The tool is open source under the MIT license.

In the comments, users were glad to see a new HTML-to-PDF tool, since many old ones are hard to use. They liked the easy setup and prebuilt binaries, and asked about support for CSS, SVG, and complex layouts. Some wanted to know about performance, and others shared problems with missing fonts or JavaScript in other tools. There were wishes for Docker support and a REST API. Some users stressed the importance of open source tools like PlutoPrint, and many said they want to try it, but hope the project keeps getting updates.

Another big update comes from Google’s Pytype project, which checks Python code for type errors before you run it. The main news is that Pytype will only support Python up to version 3.12, with no future updates planned. Pytype started in 2012, first using its own type guessing, then moving to support Python’s type hints and helping build the “typeshed” library. The reason for stopping is that Pytype relies on reading Python bytecode, which changes often, making maintenance hard. Google wants to try new ways to check types, especially for large codebases. The team thanked all contributors, especially Rebecca Chen, who worked on Pytype for ten years.

Commenters said Pytype was useful, but agreed that working with bytecode is tough. Many noted there are now other strong type checkers, like mypy, Pyright, and Pyre, which do not have the same problems. Some users were sad to see Pytype go, especially for its type guessing, while others found it too slow or hard to set up. There was talk about how Python’s type system keeps changing, and about what new ideas Google might try next. People also thanked the team for their work and asked that Pytype keep working as long as possible for those who need it.

Our next story is about Channel3, a new website aiming to list every product available online. Channel3 collects data by crawling websites and using APIs, gathering details like names, prices, and images. They use machine learning to clean and update the data, avoid duplicates, and keep everything fresh. The team believes their database is bigger and more current than other product search tools, and they plan to add APIs for developers and support more languages in the future.

Comments show both excitement and concern. Many users like the idea, saying it could save time and help find new products. Developers asked about handling different website layouts and legal issues with scraping. Some worried that stores might not want their products listed, and others recalled past attempts at “universal product search” that struggled to stay up-to-date. There was talk about privacy, whether user searches are tracked, and whether Channel3 could help small shops get noticed. People hope Channel3 can solve old problems and become a truly useful tool.

We also have a job post from Coris, a YC-backed startup looking for an AI Engineer to work on fraud detection and risk management for banks and payment platforms. The job is based in the San Francisco Bay Area, requires at least four days a week in the office, and uses Python, Django, PyTorch, and Postgres. The role mixes AI and backend work, including fine-tuning language models, building fast pipelines, and managing large datasets. They want someone with at least three years of experience, especially in ML and fraud detection, and offer a salary between $125K and $160K plus equity.

In the comments, people discussed how hard it is to find engineers skilled in both ML and backend work. Some thought the salary may not be enough for the Bay Area, given the high expectations. Others said working on fraud is meaningful but can be stressful and fast-changing. There was debate about the office requirement and work-life balance at a fast-paced startup. Some users liked the impact and learning opportunities, but said the job is not for everyone. There were also questions about tech choices, model updates, and how Coris adapts to new fraud tricks.

Next, there’s a new tool for visualizing language model embeddings from GPT-OSS-20B. The tool shows embeddings as points in a 3D space, which you can move, zoom, and explore in your web browser. Each word or phrase gets a spot in this space, and similar words are close together. You can drag and zoom the view, and reset it easily if you get lost. The tool is open for everyone to use.

Commenters liked the simple, clear visualization, saying it helps them understand how language models work inside. Some said it could be slow with so many points or confusing if you’re not used to 3D views. There were requests for more features, like searching or grouping, and discussion about using it to find hidden biases in models. Some thought it would be great for teaching, and wondered if it could work with other models too.

Finally, we look at Gouach, a French company making a new e-bike battery where you can easily remove and replace the small cells inside. Most e-bike batteries are sealed and hard to fix, but Gouach’s “Infinite Battery” uses a fireproof, waterproof case and special circuit boards, so you can swap out cells with just a screwdriver. The battery shows health and temperature in a phone app and is designed to fit most e-bikes. Gouach plans to sell to companies, shops, and DIY bike builders, starting in Europe and then the US.

In the comments, many people liked the idea, saying it could reduce waste and make repairs easier. Some pointed out that cell replacement is common for laptops, but rare for e-bikes. There were concerns about safety, since mistakes with batteries can cause fires, and questions about whether e-bike makers will support these batteries. Some users shared their own repair stories and liked that Gouach makes it simpler. There was also talk about cost, lifespan, tariffs, and regulations. Overall, people agreed that easier repairs are good, but there are still challenges before it becomes common.

That’s all for today’s episode. We covered creative 3D math, open protocols, privacy tools, language models, document tools, and even new e-bike batteries. Thank you for listening to Hacker News Daily Podcast. We’ll be back tomorrow with more news and discussions from the tech world.