Hello everyone, this is the 2025-09-21 episode of Hacker News Daily Podcast. Today, we bring you stories about fast-growing rail travel in America, a tiny JSON parser in C, calculator forensics, Google’s forensic timeline tool, Windows ARM64 debugging, early written language, indie app marketing, a Zig operating system, fully homomorphic encryption, and a power bank that looks like a gummy bear.

First, let’s talk about rail travel in the United States. Amtrak, the country’s main train company, is getting more attention with its new high-speed Acela train running between Boston and Washington, DC. The train is faster and more modern, and Amtrak is proud to show it off, even using Beethoven’s music in their videos to make it feel special. Rail travel in America is starting to look more like Europe, with more trains, better service, and a focus on comfort and fun. Amtrak is using social media, like TikTok, to reach younger riders, and ticket sales are going up. Travelers like trains because they can relax, use WiFi, and avoid driving or airport security. Trains are also better for the environment. Cities and states are helping pay for new projects, but building high-speed rail is still slow and expensive. 

In the comments, some people are hopeful about the future of trains in America and want more lines and faster service. Others think there is still a long way to go, pointing out that trains are slower than in Europe or Asia, and that tickets can be expensive. Some say government rules make it hard to build new tracks. There are both good and bad travel stories—some people like trains, others complain about delays and old cars. Many agree more and better trains would be nice, but are unsure if it will happen soon.

Next, there’s a project called sj.h, a very small JSON parsing library for C, only about 150 lines of code. It’s fast and simple, with no dynamic memory use, and gives helpful error messages with line and column numbers. However, it doesn’t handle numbers or strings itself—you have to do that part. This makes it good for simple tasks where you control the data format. The code is public domain.

Commenters like the small size and think it’s good for embedded systems or quick projects. They also say it’s easier to debug than big libraries. However, some warn that sj.h leaves out many things, and handling JSON fully is hard. Some people compare it to other small libraries, and a few say it’s a nice tool for learning. Most agree it’s best for simple or controlled jobs, not for general use.

Let’s move on to calculator forensics. This is a way to test how different calculators handle math by running a special formula: arcsin(arccos(arctan(tan(cos(sin(9)))))). The result should be close to 9, but many calculators give slightly different answers, and some old models fail badly. The article shows that the way calculators do math—like using BCD or floating point—can be seen from these results. It also helps people spot bugs or design choices in calculator software.

In the comments, people remember using this trick in school or work. Some say it’s not just fun, but useful for finding out how calculators work inside. A few warn not to trust calculators too much for serious work. Others think it’s cool to see how simple tests can show what’s happening in the hardware. Many enjoy the big list of calculator results, calling it a look into the “secret life” of calculators.

Now, let’s look at Timesketch, an open-source tool from Google for digital forensic timeline analysis. It helps teams work together on investigations by letting them upload events, add notes, tag data, and view everything on a timeline. Timesketch is web-based, supports plugins, and can be run with Docker. New AI features help analyze logs and write reports. It’s mostly built with Python and Vue.js, and has a strong community.

Commenters say Timesketch is very useful for digital forensics and team work. Some find it easy to sort big logs, while others note that setup can be hard, even with Docker. There’s talk about the new AI tools—some like them, others are not sure they are ready for serious work. Users compare Timesketch to commercial tools and hope for more plugins and guides in the future. Overall, the community is positive, with some advice to make it easier for new users.

Next, we have a story about debugging Space Station 14 on Windows ARM64. The developer found that the game crashed when using a graphics library called ANGLE, with no clear error logs. Debugging was hard because of mixed CPU modes and problems with the tools. They found that Microsoft’s DXGI library was patching a Windows function called GetDC for some games, but this broke things on ARM64. The crash only happened if the file was named SS14.Loader.exe, because Microsoft keeps a list of game executables and applies this risky patch only to them.

Commenters were surprised that Microsoft uses such hacks, with some calling it “gross.” Others point out this is not new—Windows often uses lists and patches for compatibility, which can cause strange bugs. Some developers shared similar stories, and a few joked about being “on a list.” There’s also discussion about the trouble of doing graphics on ARM64 Windows, and how indie developers have a hard time. Some suggest just renaming the .exe, but say it’s not always possible. Many agree this is a wild debugging story, showing how complex Windows compatibility can be.

Moving on, there’s news about early written language. A scientist named Genevieve von Petzinger found that the same 32 basic symbols appear in cave art across Europe, maybe as old as 40,000 years. She thinks these marks could be an early system for sharing ideas, like today’s emoji. Other scientists are not sure—some say the symbols were just decorations, or always next to animal drawings. There’s debate about what they mean, but some believe making them shows abstract thinking, maybe the first step toward writing.

Commenters have many ideas. Some say similar symbols do not always mean the same thing. Others think early people were smarter than we think. A few believe these signs could point to one shared language long ago. Some think the marks were just “I was here” messages, or had to do with hunting or water. There are even jokes about symbols looking like soccer fields or video game icons. Most agree it is hard to know the real meaning, but fun to ask questions about our past.

Next, there’s a story from an app developer who stopped coding for a week to focus on marketing their fitness app, Lagree Buddy, using Instagram. They spent time making posts, messaging trainers, and talking to users. It was harder than expected, but they learned that telling stories and making real connections is more valuable than just building new features. The process was uncomfortable but opened new doors, even if app downloads did not improve much that week.

Commenters say they understand the discomfort of marketing and often hide in code themselves. Many agree that “build it and they will come” is a trap, and that marketing is often more important than adding features. Some share their own stories about doing outreach and learning that content creation is real work. Others say balance is better than stopping all coding, but most agree developers need to pay more attention to marketing.

Now, let’s talk about an operating system written with only 1,000 lines of Zig code. The project is called OS-1000-lines-zig and is meant to be simple, fast, and easy to understand. It has a monolithic kernel and supports basic things like running programs, managing memory, and a simple shell. It can be built with the Zig compiler and is open source under the MIT license. There are plans for more features, and anyone can help by sending pull requests.

Commenters are excited to see such a small OS and think it’s great for learning. Zig is seen as a good fit—simple, fast, and safer than C. Some compare it to other tiny OS projects and ask if it runs on real hardware. A few warn that operating systems are hard and need care, even in Zig. Some want more documentation or blog posts, while others say the code is easy to follow if you know basics. Many agree that writing a small OS is a great way to learn about computers.

Moving on, there’s a beginner’s textbook for Fully Homomorphic Encryption, or FHE. FHE lets computers do math on encrypted data, so you can run programs and get results without ever seeing the real data. The book explains how FHE works and how you can build different functions, like logic gates or machine learning functions, using encrypted numbers. FHE can be used for private machine learning, confidential blockchains, safe database queries, and more. The book is open for others to help improve and aims to make learning FHE easier.

Commenters say FHE is interesting but still too slow for most real uses. Many are happy to see a beginner-level book, since most FHE writing is hard to understand. Some talk about trying FHE and finding it slow, while a few ask about safety against quantum computers. People share links to libraries and open-source projects, and hope FHE will become easier and faster in the future. They like that the book is open and welcome more people to join.

Finally, we have a fun story about a power bank that looks like a big gummy bear. The Nitecore NB10000 Gummy is popular with hikers and campers because it is very light and small, but can charge a phone more than once. Its soft, rounded shape fits easily in a pocket, and the bright colors make it easy to find. It is water resistant, uses USB-C, and has safety features. People like that it is light, fun, and practical for outdoor use.

In the comments, some people love the design and weight, while others think the shape is silly but still useful. A few worry it looks too much like candy for kids. There are tips about charging devices outdoors, and some think it is a bit pricey, but most agree lighter gear is better for hiking.

That’s all for today’s episode. Thank you for listening to Hacker News Daily Podcast. We hope you enjoyed these stories and insights from the tech world. See you next time!