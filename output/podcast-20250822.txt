Hello everyone, this is the 2025-08-22 episode of Hacker News Daily Podcast. Today, we have a wide mix of stories: new tools for Linux and privacy, the future of streaming video, government moves in tech, and some clever ways to make AI and web servers better. Let’s jump right in.

First, let’s talk about Nitro. This is a very small program for starting and watching over other programs on Linux, BSD, and similar systems. Nitro can work as the first process on a computer, inside containers, or just as a tool to keep services running. Its settings are kept in folders—each service gets its own folder with scripts for setup, running, cleanup, and logging. Everything is stored in RAM, which is good for read-only systems, and it uses very little memory. Nitro is one single binary, so there is no tricky setup—just put scripts in the right place. It restarts crashed services, supports strong logging, and does not care about the system clock. If you use musl libc, the program is even smaller. Nitro can also run on FreeBSD.

Each service folder can have a setup script, a run script, a finish script, and a log link. No run script means the service is a one-time job. Special folders like LOG or SYS handle all logs or system-wide actions. You can also make “parameterized” services with folders ending in @ and symlinks.

When the system starts, Nitro does setup, then starts all services unless they’re marked down. It restarts services if they stop, waits a bit after crashes, and runs cleanup scripts on shutdown. You can control Nitro with nitroctl—start, stop, restart, send signals, or list status. Normal Unix signals work too.

In the comments, people liked Nitro’s small size and simple design, calling it great for containers and embedded systems. Some compared it to runit, s6, and daemontools, but said Nitro has its own ideas. Many liked script-based systems over heavy setups like systemd, especially for debugging or special projects. Some asked about edge cases, like what happens if a service keeps crashing, and how Nitro handles service ordering. Others wanted more features but liked Nitro’s minimal approach. The clear documentation and simple license were praised, and some users shared their own tweaks for using Nitro in odd places. Overall, the community seemed happy to see a fresh, small tool for process supervision.

Next up, Cloudflare launched the first CDN using Media over QUIC—MoQ. This is a technical preview, free for now, that lets developers test MoQ on Cloudflare’s global network. MoQ is a new standard that could replace WebRTC, HLS/DASH, and RTMP/SRT for live media. With MoQ, you can broadcast live video from your browser and watch it in another browser, using simple web components or JavaScript. The blog gives code examples and even shows AI-generated captions running in the browser.

There are libraries for both JavaScript and Rust—so you can use MoQ in different languages. Rust support means you can combine MoQ with ffmpeg and gstreamer for advanced media tasks. However, this preview has no authentication, no automatic broadcast discovery, no Safari support, and it’s not optimized. If you need more features, you can run your own MoQ server.

The author says this release is important for finishing the MoQ standard. Real-world testing helps improve standards. The blog encourages other big companies to try MoQ too. There’s example code, tips for developers, and a Discord group for more info.

Comments are excited about Cloudflare’s early support. Some like seeing a real product before the standard is final, but others worry about future changes breaking code. Questions came up about how MoQ compares to WebRTC and HLS for latency and performance. Some are happy about Rust support, but want better documentation and easier examples. Browser compatibility, especially with Safari, is a concern. Some joke about the author’s dislike for JavaScript, while others thank them for open-source libraries. Many hope MoQ will make live streaming easier and cheaper, but note that adoption depends on more companies and a stable standard.

Now, a big story in tech and politics: the U.S. government now owns 10% of Intel after a large investment. This is part of a plan to control key private businesses, especially in technology. The government paid $8.9 billion for shares at a discount, using money from the CHIPS Act and a special chip program. The government has no board seat and can’t control the company directly. If Intel loses control of its chip factories, the government can buy more shares. Intel says the deal helps keep chip technology in the U.S. SoftBank also bought a 2% stake in Intel this week.

Intel has been struggling against Taiwan Semiconductor and delayed its new Ohio factory. The CHIPS Act, passed in 2022, is meant to boost U.S. chip makers and reduce reliance on foreign supplies. President Trump called the deal a “great win” for America and Intel, and said the shares are now worth more than what was paid. Intel’s CEO says they’re committed to making advanced chips in the U.S.

In the comments, some worry this is government overreach and could scare investors away from U.S. tech. Others think it’s good to protect key industries for national security. Some compare this to China supporting its own tech companies. Concerns include possible slower innovation and more rules for Intel. Some say taxpayers are footing the bill, and wonder if this move is good for U.S. chip tech long-term. Others see it as a political move before elections, but some hope the money helps Intel catch up globally. Some say the government should improve the market for everyone, not pick winners. There’s debate over whether this is a smart investment or a risky use of public money.

Let’s move to software updates. FFmpeg 8.0, called “Huffman”, is out with many new features for handling audio and video. There are new decoders for formats like APV, ProRes RAW, and RealVideo 6.0, plus better VVC decoding. FFmpeg now supports Vulkan for faster video encoding and decoding, using your GPU even without special hardware. New filters and better color handling make editing more reliable. The project also has a new mailing list and code site.

Earlier versions added multi-threading and support for more formats, RISC-V chips, and many bug fixes. In the comments, users say FFmpeg is central to their media work and are excited for Vulkan support. Some worry about setup complexity, but others say FFmpeg hides most hard parts. There’s talk about AV1 support, hardware acceleration on Mac and Windows, and tips for new filters. Developers thank the team for their open source work. Some want easier guides for beginners and point out that big changes mean more testing is needed, but most agree this update is a big step forward.

On a different note, let’s talk about privacy tools. Top Secret is a new tool for filtering sensitive information out of free-form text before sending it to APIs, chatbots, or large language models. Simple regex methods aren’t enough for free text, so Top Secret uses both regex and named-entity recognition (NER) to catch more types of sensitive data. For example, “Ralph lives in Boston” becomes “[PERSON_1] lives in [LOCATION_1]”, and Top Secret keeps a mapping so you can restore the real values later.

It’s useful for chatbots and LLMs, where you want to filter every message in a chat, and you can add special instructions so the bot handles filtered values. Top Secret works with the OpenAI API and lets you restore real data after getting a response. You can also use it in your app to keep sensitive info out of your database, and tweak the filters as needed.

Comments liked the mix of NER and regex for better coverage, though some worry about NER accuracy—strange names or new data can be missed. Some ask about the speed and cost of NER. There’s concern about trusting the filtering step since mistakes could leak data. Restoring original values is helpful but risky if someone maps filtered data back to real people. Some want support for more languages or suggest open sourcing the tool. A few say just blocking all sensitive data might be safer. There’s advice for using similar tools in Ruby apps and talk about privacy laws—tools like this can help with legal requirements.

Let’s look at web server technology. There’s an article about making a very fast HTTPS server using Rust, io_uring, and kTLS on Linux. Server design has changed a lot: from one process per request, to threads, to select() and poll(), then epoll, and now io_uring. io_uring lets the server queue tasks for the kernel, then check results, reducing syscalls and making everything faster. Running one thread per CPU core also helps performance.

kTLS lets the Linux kernel handle encryption after the handshake, sometimes with help from the network card. The author built a web server called tarweb using these ideas, but had to fix some missing features in libraries. There are safety issues—if you free memory too early, you can crash the server. The author wants a safer Rust library for io_uring.

Comments are excited about faster server ideas, but say io_uring is hard to use safely in Rust. Some think only very busy servers need this level of tuning. People share experiences with io_uring, and say kTLS only helps if you have special hardware. There’s talk about server design changing as Linux adds features, and how deep optimizations can make code harder to read. Some want benchmarks, while others just enjoy seeing new experiments.

Next, a story about leaving Gmail for better privacy. The writer moved to Mailbox.org because he worried Google reads emails and might share data with U.S. agencies. He wanted a service that doesn’t use his data and lets him use Apple Mail. He compared Mailbox.org, Proton Mail, and Tutanota. Proton Mail and Tutanota have good encryption but require their own apps, which he did not like. Mailbox.org allows Apple Mail and PGP encryption, for €2.50 a month.

He used imapsync to copy all his emails from Gmail, set up forwarding with a filter, and started changing his address on services. Mailbox.org supports PGP keys, making encrypted email easy, even on iOS. He is happy with the switch.

In the comments, some people support leaving Gmail for privacy and like Mailbox.org’s features. Others think the risk from Gmail is small for most people, and say privacy is hard with any email. Some prefer Proton Mail, even with the special app. A few warn that smaller providers mean less convenience and spam filtering. Many agree paying for email is better than paying with your data. There are tips for telling contacts about a new address and using custom domains for easier future moves. Some miss Gmail’s search and spam filters, but others like the lighter webmail.

On to desktop tools: Clyp is a new clipboard manager for Linux. It’s written in Go, uses GTK4 for a modern look, and works fast—even with over 10,000 clipboard items. It supports both X11 and Wayland, stores up to three images, and keeps everything safe in your home folder. You can search, copy, or delete items with just your keyboard. The app avoids saving duplicates and offers quick shortcuts. You can install it from .deb or Arch packages, but need GTK4. The code is open source under GPL-3.0.

Comments are happy to see Wayland support, since many old clipboard managers only work with X11. People like the clean UI and keyboard controls. Some wish for a GTK3 or lighter version, and others compare Clyp to tools like CopyQ or Diodon. There’s a request for clipboard sync between devices, but that’s not available yet. Some like the lack of cloud sync for privacy. Developers thank the author for open-sourcing the code, and some want more features like encryption or a command-line tool. Most are excited for a new, simple clipboard manager.

Switching gears to biotech, BlankBio is a new company from Y Combinator, aiming to make RNA easier to use for programming biology. Just like code controls computers, RNA can control how cells behave. RNA can turn genes on or off, or tell cells to make new proteins. Today, RNA is used for vaccines and some treatments, but it’s still hard to design and use for new things.

BlankBio is building software tools to help people design and test RNA much faster, hoping this will allow new medicines and changes in agriculture. Their software runs on normal computers, so students, doctors, or small companies can try new things with RNA.

Comments show excitement about making biology programmable, but some say biology is tricky and real-world results are slow. Some ask if the tools will be open source. Safety is a big topic—making biology easier means mistakes are possible. Some compare BlankBio to earlier companies with similar goals. The main challenge is getting people to trust and use the software. One comment points out RNA design is still expensive and slow, even with better software. Some want BlankBio to help students learn synthetic biology. Overall, there’s hope and caution—new tools are good, but progress takes more than software.

Finally, an interesting experiment with AI: someone made ChatGPT doubt itself more by adding a prompt to make it careful and skeptical. The prompt told ChatGPT to question its answers, check its work, and review replies as if looking for mistakes. After this change, ChatGPT started answers with warnings and took much longer—sometimes several minutes—to reply, but often found and fixed its own errors.

Comments liked the idea of making AI more honest about its limits. Some thought the long answer time was funny or annoying. There were warnings that too much doubt could make AI less helpful or too slow. Some shared their own prompt experiments, and others said this “red team” style should be the default for important questions like medicine or law. There were jokes about AI being insecure, and discussion about balancing caution and usefulness. Most agreed a bit of self-doubt makes AI more reliable, but too much can slow it down or make answers unclear.

That’s all for today’s episode. We covered small system tools, fast servers, privacy moves, new streaming tech, biotech, and smarter AI. Thanks for listening to Hacker News Daily Podcast. See you next time!