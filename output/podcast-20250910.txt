Hello everyone, this is the 2025-09-10 episode of Hacker News Daily Podcast. Today, we have a busy lineup covering new tools and updates for developers and tech fans.

First, let’s talk about ChatGPT’s new Developer Mode. This feature gives developers full access to the Model Control Panel client. With Developer Mode, you can change advanced settings, check model logs, adjust system prompts, and test different model versions more easily. You can also try new features before they’re released to everyone, use special API endpoints, and see more details about each API call. The control panel even lets you catch problems and view all messages the model received and sent. While some parts are made for power users and need care, the documentation offers step-by-step guides for using these new settings. Many developers in the comments are excited about having more control and better debugging options. Some worry about security and privacy, since more access could make it easier to break things or leak data by mistake. There are also questions about who can use Developer Mode and if it’s only for paid users. Most people agree this is a good update, but they want OpenAI to be careful with privacy.

Next, we have a fun project called term.everything. This lets you run any GUI app inside your terminal window, even over SSH. It works on Linux, supports both X11 and Wayland, and is written in TypeScript with some C++. The tool acts as a special Wayland compositor that sends window graphics to your terminal instead of your screen. If your terminal supports images, like kitty or iTerm2, the quality is high, but it can be slow. If not, the graphics are made from text. People have used it to watch movies, play Doom, and even run a terminal inside a terminal. The software is still in beta and not all apps work well yet, but you can try it from GitHub. In the comments, some people are excited by the creativity, calling it a cool hack. Others question the real use cases and worry about performance. A few mention it could be useful over SSH, and some users compare it to older projects that did similar things. There are also bug reports and questions about which apps are supported. Overall, the response is a mix of fun, curiosity, and some practical questions.

Now, let’s look at why large language model outputs are not always the same, even with the same input and temperature set to zero. The article explains that while floating-point math is not always exact, and order of operations can cause small changes, the main reason for non-deterministic results is batching. LLM servers group user requests in batches, and the batch size and what other requests are in your batch can change the output. This is due to how GPUs run certain math operations for speed. The authors suggest making these kernels “batch-invariant” so the result for each input is always the same, no matter the batch size. They tested new batch-invariant kernels and found that outputs became reproducible, though a little slower. In the comments, some readers like the technical deep dive, while others say small differences don’t matter for most use cases. Some are happy to see a solution after running into bugs, and there are questions about speed and real-world use. There’s also talk about whether popular machine learning libraries should use batch-invariant kernels by default. Most people agree determinism is important, at least for debugging and research.

Moving on, we have the HackberryPi CM5 project. This is a small, handheld Linux computer built with the Raspberry Pi Compute Module 5 and a real BlackBerry keyboard. The goal is to make a portable device for learning Linux and understanding hardware and software together. It has a 4-inch touch screen, metal case, battery, USB 3.0 ports, HDMI, and NVME slot. The keyboard comes from old BlackBerry phones and can be changed. The device is partly 3D-printed, and you can download the models to print your own parts. You can buy the kit and build it yourself, and there’s a Discord group for help. The project is open source on GitHub. In the comments, people like the retro feel and real keyboard. Some want to use it for programming or as a small Linux box for servers. There are questions about battery life, how well the keyboard works, and the price, but most agree it’s a fun project that shows what you can do with open hardware.

Next up, Recall.ai is a tool for recording and getting transcripts from video meetings using a simple API. It works with Zoom, Google Meet, and Microsoft Teams by joining as a bot, recording the meeting, and creating a transcript with speech-to-text. Developers can add these features to their apps without building their own system. Recall.ai supports different languages, offers real-time or post-meeting transcription, and has privacy controls. Setup is quick, and it’s aimed at use cases like sales calls, support, and note-taking tools. In the comments, many people see it as useful, saving time for developers. Some raise privacy questions or say their company rules block meeting recording. Others worry about cost, transcript quality, and legal issues around recording. Some want extra features like speaker ID or summaries. Overall, most people think it’s a good idea and want to try it.

Now, let’s talk about Supabase and OrioleDB. Supabase now owns the OrioleDB storage engine patent and is giving everyone a free license. OrioleDB is a new, faster storage engine for Postgres, designed to replace the old one without big changes for users. Benchmarks show it can be up to five times faster for some tasks. The project is open source, and Supabase wants OrioleDB’s changes to be part of the official Postgres code in the future. By sharing the patent, they want to protect open source and stop anyone from using patents to attack open projects. In the comments, people are happy about the open patent and performance gains, but some warn that patents can still be tricky. Others note that getting changes into Postgres will take time. There are questions about long-term support and how OrioleDB will work with other extensions. Overall, this is seen as good news for Postgres and open source, but people want to see how it develops.

Mux is next. They are a company that helps developers add video to their apps and is hiring engineers and managers. Mux’s team has worked at Google, YouTube, and built tools like Video.js. They work with clients like Reddit and Vimeo, and have strong investors. Mux offers remote and office jobs, good benefits, and supports professional development and family needs. In the comments, people respect Mux for their open source work and their event Demuxed. Some talk about the hard problems in video tech and the value of Mux’s tools for small teams. Others discuss remote policy, international hiring, and job levels. Some share good experiences with Mux support. There’s also talk about competition with big providers and the need for diversity and good communication.

Haystack is a new tool to help developers review pull requests more easily and quickly. It puts all the needed context for a review in one place, so you spend less time jumping between files or docs. Haystack fits into your current workflow, works with GitHub and other platforms, and is fast and lightweight. In the comments, people are interested in anything that makes reviews easier. Some are curious about how it shows context, while others wonder if it can get too cluttered. There are questions about security, pricing, and if it’s open source. Some say that tools work best if teams have good habits already. Most people agree it’s worth trying new ideas to improve code review.

Finally, let’s cover Dotter, a Rust tool for managing your dotfiles. Dotfiles are configuration files for your system. Dotter helps you organize, deploy, and update these files across different systems with simple config files and templates. It supports Mac, Linux, and Windows, and can handle different setups for each machine. You can install it in many ways, and it has helpful commands for deploying and syncing your files. In the comments, users like that Dotter is simple, works across systems, and handles templates well. Some prefer it over older tools like GNU Stow. There are requests for more documentation, and comparisons to scripting or linking by hand. Some want Dotter to handle secrets, but most say those should be kept separate. People think Dotter is fast, modern, and helpful, but the best tool depends on your own setup needs.

That’s all for today’s episode. We hope you enjoyed these stories and found something useful or inspiring. Thanks for listening to Hacker News Daily Podcast. See you next time!