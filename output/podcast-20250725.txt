Hello everyone, this is the 2025-07-25 episode of Hacker News Daily Podcast. Today, we have stories about new web browser features, big changes in the US train industry, new tools for web developers, a lesson in computer connector names, AI in surgery, teaching programming at MIT, animated terminal cursors, a very different CPU design, the hard truth about date parsing, and a new kind of battery for green energy.

Let’s start with the world of web development. One article explains that modern CSS and browser APIs now let us make smooth, fast page transitions without using Single Page Applications, or SPAs. In the past, SPAs were popular because they could show nice transitions and avoid full page reloads. But this brought problems: slower loading, broken scroll or focus, endless loading spinners, and heavy JavaScript bundles. The author says most SPAs don’t really feel smooth—they just try to “fake” what browsers could already do.

Now, browsers like Chrome and Edge support the View Transitions API. With a bit of CSS, you can fade between pages or animate shared elements, such as product images, without any JavaScript. You can keep headers or navbars in place, all with normal URLs and pages. If you want even faster navigation, you can use Speculation Rules to let the browser preload or prerender pages before the user clicks. This can make navigation almost instant, but only if your site is already fast and light. Browsers also help with the Back and Forward Cache, making it quick to move between pages—unless JavaScript gets in the way, which often happens with SPAs.

The article compares a typical Next.js SPA—big JavaScript bundles, slow time-to-interactive, and tricky SEO—with a modern multi-page site using new browser features: small or no JavaScript, fast loading, simple SEO, and perfect scroll and focus. The main message is clear: most websites like blogs and shops do not need to be SPAs. Using frameworks and heavy JavaScript for every project is a mistake. You should use HTML, CSS, and browser features unless you really need complex interactivity.

In the comments, many developers agree and say they are tired of heavy SPAs for simple sites. Others remind us that not all browsers support these new CSS and API features yet, so it is not always easy to use them in real projects. Some say SPAs are still good for very complex web apps, like Gmail or Figma. There’s also talk about business pressure: clients and managers ask for “app-like” sites because it sounds modern, even if it’s not needed. Some point out that frameworks keep pushing SPAs because it’s good for their business, not always for the web. There are worries about older browsers, and some are excited to try the new APIs. Many developers want faster, simpler sites, but old habits, browser support, and business needs make it hard to move away from SPAs for now.

Next up, big news in the US train industry. Union Pacific wants to buy Norfolk Southern. Both are large train companies: Union Pacific in the West and Norfolk Southern in the East. If they merge, one company would control a huge part of the country’s railways. This could make it easier to send goods from coast to coast without switching trains, and help compete with trucks and Canadian rail companies. The deal could save money by reducing jobs or closing offices, but it might also mean less competition and higher prices for companies that ship goods by train. The government must decide if the deal is fair. In the past, big train company deals have been stopped because of worries about competition.

People in the comments are split. Some say the deal is good because US trains need to be stronger to fight truck companies and Canadian railroads. Others worry one company will be too powerful, and prices will go up. Some remember that past train company deals promised better service, but did not always deliver. There’s also talk about job losses and whether the US should run its train system more like Europe, where tracks and trains are run by different groups. A few hope the deal will help the environment by moving more goods by train instead of truck. Overall, there are both hopes and worries about this possible merger.

Let’s move back to web development. Tailwind Plus has announced that you can now use its UI blocks with plain JavaScript, so you don’t need React or Vue to get dropdowns, dialogs, and more. The new library, @tailwindplus/elements, gives you special HTML tags like <el-dropdown> and <el-select>. These handle keyboard support, focus, and accessibility, so you don’t need to write your own JavaScript. They work with just HTML, and if your browser doesn’t support some features, Tailwind Plus includes polyfills.

You can use these elements anywhere: in plain HTML, with Svelte, Rails, React, or other frameworks. They work inside forms and send data like normal controls. In the comments, people are excited. Many like that you don’t need to learn a whole framework to get interactive elements. Some say this is good for accessibility, and others like that the elements use native browser features, which should mean faster and smaller websites. There are some concerns about browser support and the paid plan for Tailwind Plus. Some wonder if using custom elements will make things harder to debug or style. But overall, most think this is a great move and hope more products will use web standards in the future.

Now, a small but interesting story about computer connectors. Many people call the old 9-pin serial connector a “DB9,” but the correct name is “DE9.” The connector is part of the D-sub family. “D” means D-shaped, and the next letter is for shell size: “B” is for the big 25-pin connector (DB25), and “E” is for the smaller 9-pin version (DE9). People started saying “DB9” because they already knew “DB25,” but it is not correct. SparkFun, the company behind the article, decided to use the correct “DE9” name for their new product, hoping to teach people the right term.

In the comments, some people say they never knew about “DE9” and always called it “DB9.” Others learned the right name in school or from official papers. Some think it’s not a big problem, as everyone understands “DB9,” but others say it’s good to be correct, especially when teaching or making products. A few joke about other tech names that people get wrong. Most agree it’s interesting to learn the history, even if most will keep saying “DB9” out of habit.

Another story is about AI in surgery. A team at Johns Hopkins used AI to control a surgical robot and perform an experimental gallbladder surgery on pig organs. This is the first time a DaVinci surgical robot has done surgery using a ChatGPT-like AI system. Before, robots could only do simple tasks with lots of help. This new robot, SRT-H, can learn from watching humans and use feedback to improve. The AI uses transformer models, like ChatGPT, to plan each step. After training on many surgeries, SRT-H could do all 17 steps of gallbladder removal with 100% success on new pig organs. It also understands simple spoken feedback and can improve over time. The robot is as accurate as an expert human surgeon, but a bit slower.

However, there are still limits. Training for real human surgery needs special movement data, and the company behind DaVinci robots does not want to share this data. Researchers are looking for new ways to get training data. In the comments, some are excited and see this as a big step for AI in medicine. Others worry about safety, mistakes, and who is responsible if something goes wrong. Some say human surgeons still have skills and judgment that are hard for AI to match. A few are worried about the slow speed in emergencies. Many agree this is an important start, but human oversight will be needed for a long time.

Now, a story about teaching programming at MIT. MIT changed its main beginner programming course from Scheme to Python. In the 1980s, programmers wrote code close to the hardware and used small parts they understood fully, like resistors in electronics. Scheme was good for learning how to build bigger systems from small parts. But by the 2000s, software had become much more complex—students now need to deal with big libraries and try things out to see how they work. So, MIT’s new course used robots and Python, which already had good libraries for working with robots. Sussman, a professor, said Python was chosen for practical reasons, not because it was better for teaching ideas.

In the comments, many people feel strongly. Some are sad or angry, saying MIT is giving up on deep computer science. They think Scheme helps students think in a special way. Others agree with the change, saying Python is more useful for beginners and helps students build things faster. Some worry Python hides important ideas. A few say the language does not matter as much as teaching the right concepts. There’s also talk about theory versus practical skills. Some miss the old days of learning “all the way down,” while others see change as normal. The switch shows a split between those who value theory and those who want practical skills first.

Let’s look at something fun for terminal lovers. Tattoy, a terminal tool, now supports animated cursors. It uses the same cursor format as Ghostty, another tool, but draws the cursor differently. Ghostty uses pixels for smooth animation. Tattoy is text-based and uses special block characters to make a pixel effect, so the cursors can look more pixelated. Some users may like this retro style.

Adding support for Ghostty shaders in Tattoy was quick, but making it work well took a week. Handling transparent and smooth edges was hard, since Tattoy cannot check the color of each pixel. The writer solved this by making a low-quality image using text colors and comparing images to show only the parts that change. The result works, but there can be lag, especially with large terminal windows. More improvements are planned, like letting Tattoy control all cursor drawing.

In the comments, many users are excited about animated cursors in terminals. Some love the new look, others wonder if the pixelated style is better or worse than smooth cursors. A few worry about lag and ask how much it affects real use. Some are impressed by the clever solutions for blending and transparency. Others like how tools like Tattoy are easy to change and improve. A couple of people say not everyone wants fancy animated cursors, especially if they prefer speed and simplicity. Some developers share ideas for making the animations faster. Overall, the comments show excitement, technical questions, and suggestions for the future.

Now, let’s talk about CPUs. Efficient Computer has announced a new CPU called the Electron E1, which they say is up to 100 times more energy-efficient than the best ARM chips for embedded systems. The Electron E1 uses a “spatial data flow” architecture, very different from normal CPUs. It has no cache and no out-of-order execution. Instead, it’s made of a grid of small “tiles.” Each tile does a simple job, and data moves between them. The compiler decides everything before the program runs, turning code into a data flow graph.

This saves energy by not moving data back and forth all the time. The chip can run code in languages like C++ and Rust, and works with machine learning tools. Their new compiler, effcc, is available for testing. The chip also supports 32-bit floating point numbers, which is rare for low-power chips.

But there are challenges. The compiler must solve problems that normal CPUs fix while running. Debugging may be hard if something goes wrong. Efficient Computer measures performance as “operations per joule,” a number used for AI chips, not regular CPUs. Real tests are still needed. In the comments, some are excited about this new design. Others are careful, saying “magic compilers” have failed before. Some worry about toolchain usability and replacing old chips. Others want standard benchmarks before believing the claims. There’s also talk about whether the chip can run popular programs like Doom. The community is interested, but wants to see real results.

Next, a warning about date parsing. The article says you should not write your own date parsing library, and tells the story of Eleventy’s changes. Date parsing is hard and full of hidden problems. In 2018, Eleventy used Luxon, but it was big and did not support tree-shaking. Other libraries were small but failed many tests. Date parsing has many confusing rules, especially with formats like ISO 8601. For example, “200” is a decade, not a year.

The article says strict formats are better, and Eleventy is moving to the new RFC 9557 format, which matches the new JavaScript Temporal API. The author wrote a small library called @11ty/parse-date-strings, which only parses dates and matches the new standards. It is much smaller and faster.

In the comments, many people agree that date parsing is very hard. Some have tried to write their own parser and always found bugs. Others say even popular libraries fail for some formats. Some think strict formats like RFC 9557 are a good idea. A few share stories about problems with JavaScript’s built-in Date.parse. Some warn that even new libraries need lots of testing. There are also comments about dependency size and performance. A few think writing your own small library is okay if your needs are simple, but most say you should use trusted libraries. Some are excited about the new Temporal API, but wish it had arrived sooner. Almost everyone has been tripped up by date parsing at some point.

Finally, a story about a new kind of battery—the “CO2 Battery” from Energy Dome. This battery uses carbon dioxide (CO2) to store and release energy, instead of lithium. The system is closed: electricity is used to compress CO2 into a liquid for storage, and when you need power, the CO2 expands and spins a turbine. No CO2 is released into the air. The battery is over 75% efficient, lasts more than 30 years, and uses easy-to-find parts. It is cheaper and more eco-friendly than lithium batteries, and does not need rare metals. The system is already working at a large scale and is connected to the power grid. It works best for storing energy for 8 to 24 hours, perfect for solar and wind.

The CO2 Battery is different from compressed air storage because it does not need very cold temperatures. All materials—mostly water, steel, and CO2—are easy to get, and the design can be used anywhere.

In the comments, some people think this is a smart idea because CO2 is cheap and safe. Others are unsure if the battery will really be as cheap or efficient as the company claims. Some point out that the real test will be how well it works at large scale and over many years. A few worry about CO2 leaks, but others say the system is closed and should be safe. Some ask about maintenance and the life of moving parts. There is interest in how this technology could help countries without lithium or advanced materials. Others suggest waiting for more real-world results before getting too excited. Overall, many agree it’s good to see new ideas for storing green energy, even if there are still questions.

That’s all for today’s episode of Hacker News Daily Podcast. Thank you for listening, and we’ll see you next time.