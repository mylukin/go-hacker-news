Hello everyone, this is the 2025-06-21 episode of Hacker News Daily Podcast. Today, we have a range of stories: from privacy tools for web browsing, creative ways to beat online distractions, the hardware behind Google’s AI, a new sound programming language, the story of stainless steel, tools for Makefiles, hidden features in git, experiments in startups, new writing software, and an open-source film projector. Let’s get started.

First, let’s talk about LibRedirect, a browser extension that sends you from big websites like YouTube, Twitter, Reddit, and Instagram to lighter, privacy-friendly copies. For example, instead of YouTube, you can watch videos on Invidious or Piped. For Twitter, you get Nitter, and for Reddit, there’s Libreddit or Teddit. There are over 50 such alternatives, covering music, maps, and more. LibRedirect helps you skip ads and tracking, making browsing faster and more private.

Many people like how this saves bandwidth and blocks ads, saying they don’t want heavy web pages just to see a tweet or a short video. Some users, however, complain that these alternative sites—called “instances”—go offline often or are slow. They hope the extension will learn to switch between working instances automatically.

Some are worried about privacy and security. Instead of big companies, your data may end up with whoever runs these small services. For example, using FreeTube or Piped means your watch history could be seen by strangers or by services like Cloudflare. Some users accept this trade-off for fewer ads, while others think it’s risky.

There’s also talk about using VPNs with YouTube, but people say this does not really hide you and could add new risks. Some suggest simple user scripts instead of big extensions, but that can be hard for most people and usually works for only one site at a time.

A few want the opposite: a way to go back from these light sites to the official websites. There’s worry that browser makers may block tools like LibRedirect in the future as companies fight privacy workarounds.

People also mention another tool, Farside, which can pick working instances for you, but then you must trust Farside itself. In the end, people like more privacy and less web bloat, but worry about trust, ease of use, and how long these solutions will last.

Next, we have a clever hack to avoid wasting time on distracting websites. The author uses a cheap $8 smart outlet. A script checks if the plug is on or off using WiFi and its API. When the plug is on, the script edits the computer’s `/etc/hosts` file, blocking sites like Twitter, Instagram, YouTube, and Reddit. To visit these sites, you must get up and turn off the plug, which is placed far away. This small physical step adds enough friction to help break the habit of mindless browsing. The smart plug has a manual switch, making toggling easy. The method is simple, uses common tech, and the author shares the script online.

Readers find the idea smart and fun. Some never thought of using a smart plug to trigger scripts and want to try it for other projects. There’s doubt if it will work long-term, or if users will just edit the hosts file instead. Still, many agree that the extra step might be enough to stop distractions. Some see it as a neat experiment in self-control, and overall, people think it’s a creative solution to a common problem.

Moving on, let’s look at Google’s TPU chips—special hardware made just for AI. The article explains how TPUs differ from GPUs. Google built TPUs for speed and energy savings, using special systolic arrays and the XLA compiler. TPUs power Google’s biggest AI models and services. One chip, like TPUv4, has two TensorCores and much more on-chip memory than GPUs. Key parts inside are the Matrix Multiply Unit for fast math, a Vector Unit for simpler tasks, and different memory buffers.

TPUs have fewer cores than GPUs but do more work, as they are built for matrix math, which is the heart of neural networks. Systolic arrays—grids of small computing parts passing data to each other—help make this possible. The downside is that they are not as good with sparse data.

TPUs handle memory differently. Instead of using caches like GPUs, they use pre-compiled programs, and the XLA compiler plans all memory moves before running. This makes things fast and saves energy but is less flexible.

Scaling up, TPUs connect together easily. You can link them in trays, racks, pods, even huge clusters, with fast connections. You can group chips to fit your job, and if some fail, others keep working. The compiler handles most details, so scaling is easy for developers.

There are real photos of TPU hardware in the article. In the comments, people ask why Google doesn’t sell TPUs directly. Some say renting makes more money and keeps Google ahead. Others note selling hardware would need more support and could help rivals catch up. There’s talk about company value, too—Google’s stock price may not reflect the true value of its AI work.

Technical readers discuss which algorithms work well on TPUs—mainly those based on big matrix multiplication. Some share learning resources, like JAX’s scaling book.

Other comments compare TPUs and GPUs: TPUs give more predictable results but rely on the smart compiler, while GPUs are more flexible. Some wonder how outsiders learned so much about TPUs, and others point out that Google lets people try TPUs in the cloud. Overall, readers like the deep details and talk both business and technical sides of TPUs.

Next, we have Sapf, a new programming language for sound and music, inspired by Forth, APL, and Supercollider. Sapf lets you write short code to make complex audio, using lazy sequences, auto-mapping, and a simple stack-based style. Sapf uses postfix syntax, so commands go left to right and take arguments from a stack, like in Forth. The language is functional and data is mostly immutable. Sapf borrows APL’s way of working with arrays, letting you apply functions to whole lists at once and use special operators for mapping and reducing.

For audio, Sapf treats sounds as infinite sequences—streams of data that are processed lazily. Main data types are numbers, strings, lists, forms (like dictionaries), functions, and refs (the only mutable type). There’s auto-mapping, so giving a list to a function processes all items at once. The “each” operator maps functions deeper inside nested lists. You can create and transform sound signals, like sine waves and analog effects, with simple code. The article gives setup instructions and says Sapf aims to be expressive and fun for live audio programming.

In the comments, people are excited about Sapf’s mix of APL and Forth ideas. Some mention other audio languages like Sporth or TidalCycles and share links to similar projects. One says Sapf’s code examples sound good, which is rare for a new music language. There’s interest in running Sapf on Linux, though it’s currently made for macOS. Some discuss the challenge of moving from SuperCollider to Sapf and wonder about bridges between the two. Users talk about audio setups on Linux and problems running other music languages, showing that sound programming can be tricky. Some comment on how digital tools can make “analog” sounds, sharing tips on harmonics and filters. Overall, the community finds Sapf “cool” and hopes that array and stack-based language ideas will mix more in the future.

Now, let’s hear the story of Harry Brearley, the poor boy from Sheffield who invented stainless steel. Brearley was born in 1871 to a poor family and started working young, doing hard jobs. He was curious and loved learning, especially about steel. The chief chemist at a steel lab noticed his interest and taught him math and science. Brearley read many books, became skilled at analyzing steel, and worked with experts to solve big problems.

In Russia, he managed a steel factory during the revolution and learned to innovate. Later, at Brown-Firth in Sheffield, he tried solving problems with gun barrels by adding chromium to steel. In 1913, he noticed that one new steel didn’t rust after being left in water overnight. This was “stainless steel.” At first, his bosses and local knife makers thought it was too hard to work with, but Brearley kept pushing and finally convinced a knife maker to try it. The result: knives that stayed shiny and rust-free.

Stainless steel then became popular for cutlery, engine parts, and medical tools. Even though others had made similar metals before, Brearley’s drive and focus made him known as the father of stainless steel. He faced fights for recognition, but his story shows how curiosity and not giving up can lead to big discoveries.

In the comments, one user focused on a detail: the algebra book Brearley used, “Todhunter’s Algebra.” They shared links to read it online. This shows how small details can interest readers and add background to a story.

Next, let’s talk about mbake, a tool for formatting and checking Makefiles, which automate building software. Mbake fixes spacing, tabs, and line breaks, joins split lines, and removes extra spaces. It can also find which rules should be marked with `.PHONY` and add or group these lines for you. You can set your own rules in a config file. Mbake works from the command line, in VSCode, or in CI/CD systems. It’s written in Python and easy to install with pip, and it supports plugins for custom rules.

Some readers say tools like this existed in the 1990s, so the idea is not new. One asks if you can ignore rules inline, but this is not in the README yet. Some dislike `.PHONY` lines being grouped together and prefer them near each rule. Others do not like Make, saying it is hard to use with only environment variables. Fans reply that Make is simple and works everywhere, except maybe on Windows. There’s debate about performance and language choice—some wish mbake was not in Python, but others say Python is easy and common. Some joke about language debates, saying the real work is writing the tool. Many agree tools like mbake help keep Makefiles clean and correct.

Now, an article about git notes—an almost hidden feature in git that lets you add extra information to any commit, file, or folder. With git notes, you can add comments or metadata after a commit is made, without changing the commit itself. You can record code reviews, tests, or links to discussions. Some tools, like Gerrit’s reviewnotes and Google’s git-appraise, use git notes for code reviews and test results, keeping all data with your code history and offline.

But git notes have problems: the interface is confusing, most tools hide them, and services like GitHub do not show git notes. Using notes on files or folders, not just commits, is even harder. The author says even they forget git notes exist.

The article ends by saying git notes could make git more independent from platforms like GitHub, keeping all project history and reviews with the code. In the comments, some say they’ve used git for years without knowing about notes. Others doubt GitHub will ever support them more, since companies want to keep data on their own sites. Some defend GitHub but agree that business reasons make features like git notes less likely to spread. Readers are surprised by this hidden feature and interested in its power, but see why it stays little known.

Next, let’s talk about experiments in startups and the problem of “p-hacking.” The article explains that startups often run experiments, like A/B tests, and rush to find wins. But if you test many versions or metrics, your chance of a false positive—finding something that looks good but isn’t—goes much higher. The article shows you should use math corrections like the Bonferroni correction, and you should pre-register your metrics to avoid cheating. Stopping tests early when you see a win is also risky, as it increases false positives. The advice is to plan experiments carefully, stick to your original plan, and not be afraid of negative results.

In the comments, many agree p-hacking is common, even at big companies. Some say most teams do not understand statistics well, and few use the best methods. Others say in real startups, there isn’t enough data or time, so teams just pick what looks best and move fast. Some argue that being too strict wastes time, especially for small changes. Several suggest focusing on big, obvious improvements and not stressing about tiny differences. There’s debate over how much rigor is needed—some want high-quality tests, others prefer speed and practical results. Many agree the right approach depends on the stage of the company.

Now, a new writing app is being built to replace Overleaf and Notion, to help people write and organize complex documents like theses. The app has a modern editor, works in the browser, allows real-time collaboration, and helps with categories. It is inspired by LyX, but you don’t need to know LaTeX. You can export in many styles, like IEEE papers, and each part of the document is its own editable block. You can add Markdown, manage citations, use cross-references, footnotes, diagrams, math equations, and to-do sections. The app is available online and as a Mac app, and you can try it at monsterwriter.com.

In the comments, some like the idea but worry about storing research in the cloud. One person wants a Windows version. Others ask if the payment is really one-time or if there will be extra charges for upgrades. Some want an open-source version or mention org-roam for Emacs as a competitor. There’s talk about Emacs being powerful but hard to learn, and some share their own setups in Obsidian. Some say files and folders are still the best way to organize work. There’s also talk about other tools like Scrivener, Obsidian, and Paperpile, and discussion about citation tools like Zotero. Overall, people are interested but have strong opinions and different needs.

Finally, let’s look at a modern, open-source 16mm film projector project. Old projectors are hard to repair and use, so a team upgraded an Eiki RT projector with a super-bright LED, water cooling, and digital controls. Most old projectors are breaking down, and parts are hard to find. The group wanted a modular, open design, using many 3D-printable parts. The biggest challenge was finding an LED as bright as old halogen bulbs. After testing many LEDs and using water cooling, they matched and even beat the old bulbs’ brightness. Instead of a spinning shutter, they used a digital flicker by turning the LED on and off quickly.

The prototype could run at different speeds, had a digital shutter, and used custom controls for brightness and frame rate. They showed it at a festival and found it brighter and sharper than old models, but had to fix some flicker problems. After fixes, it gave sharp and white images. The team shares all their work openly for others to copy or improve.

People in the comments love seeing film tech supported with open-source parts and LEDs. Some worry the project is too complex and want simple, useful features for more people. There’s debate about the future of film—some think it’s dying, others see strong communities. Technical comments explain why LEDs need more power, warn about water-cooling parts, and discuss using the projector for archiving versus scanning. Many praise the project for keeping film alive and want it to be practical, easy to build, and useful for both artists and archivists.

That’s all for today’s Hacker News Daily Podcast. We hope you enjoyed these stories and the wide range of ideas from the tech world. Thank you for listening, and see you next time.