Hello everyone, this is the 2025-06-21 episode of Hacker News Daily Podcast. Today, we have news and discussion on Google's TPUs, a privacy web extension, a new music programming language, experiment design for startups, a modern open-source film projector, Claude Code's new feature, tools for Makefiles, a type inference playground, the wild life of William Playfair, and Denmark's metal detector program. Let's get started.

First, let's look at Google's TPUs, the special chips made for AI tasks. TPUs are different from GPUs because they use a design called systolic arrays, which are good at matrix multiplication and convolution, key parts of deep learning. Each TPU chip has big memory blocks and special math units called TensorCores. They have fewer cores than GPUs, but bigger on-chip memory. This makes TPUs less flexible, but very efficient for AI jobs. TPUs also use ahead-of-time compilation, planning memory before running so they save energy. This means programs like JAX must be recompiled when input shapes change. TPUs are built to link many chips together, forming trays, racks, and big “pods” for huge AI jobs. High-speed connections let them split work in smart ways. Multiple pods can work together for very large models, and Google’s XLA compiler handles most of the hardware communication.

In the comments, people ask if TPUs make language models more or less deterministic. Some say LLMs are deterministic except for sampling, which you can turn off. Others discuss what algorithms run well on TPUs—anything that’s large and dense, like SVD or solving linear systems, is a good fit. Some are surprised by the technical depth and wonder if the article’s author works at Google, but others point out anyone can try TPUs using Google Cloud. One technical point: TPUs save energy by not using memory management units and by pushing data instead of pulling it. Overall, readers find the article detailed and helpful for understanding why TPUs are so powerful for AI.

Next, we have LibRedirect, a browser extension that redirects you from big sites like YouTube or Twitter to privacy-friendly alternatives, such as Invidious or Nitter. It supports many services and lets you pick your favorite frontend. LibRedirect automatically changes links, so you get fewer ads and less tracking, without needing to log in or share your data. The goal is to give you control and protect your privacy.

In the comments, users point out both good and bad sides. Some say privacy frontends often go down or get blocked, so it’s hard to find a working one. Others mention Farside, a similar project, and ask how LibRedirect is different. There is debate about security: browser extensions can be risky, but userscripts can also be dangerous if you do not check the code. Some say using privacy frontends just moves your data from big companies to random server owners, which may not be better. Others suggest using a second browser with a VPN for more control. Solving CAPTCHAs on some frontends can be annoying. Most agree privacy is important, but there are many views on the best way to get it and who to trust.

Moving on, there’s a new programming language called sapf, designed for creating and transforming sound. Sapf is inspired by Supercollider, APL, and Forth, using a stack and postfix notation. It represents sounds as lazy lists, making it easy to write short, readable audio programs. Sapf has few data types and tries to keep the syntax simple. There are special tools to handle lists and multi-channel audio, and you can map functions over lists without writing loops. You run sapf in the terminal with built-in help and sample programs.

In the comments, people are excited about sapf’s design. Some mention that other stack-based music languages exist, like Sporth, and share links. Many like the mix of APL and Forth ideas, saying it’s strong for music programming. Some ask if sapf can work with other tools or on Linux, and share tips for Linux-friendly music languages. The creator of sapf also made Supercollider, which impresses many. A few users want easier installation, like a Linux binary or Flatpak, and others suggest web-based music tools for easier access. Overall, people enjoy sapf’s creative approach and hope for better cross-platform support.

Now, let’s talk about p-hacking in startups. The article explains how startups can make mistakes in experiments by running too many tests, changing goals after seeing data, or peeking at results early. For example, if you test four website layouts, the chance of a false “winner” goes up. The article suggests using corrections like the Bonferroni method, picking your main goal before starting, and not stopping early unless you use stricter rules.

Commenters point out these problems also happen at big tech companies, and many teams do not use the best statistics. Some say that in startups, speed is more important than perfect rigor, and sometimes you just need to pick the best option and move on. There’s debate about how much care is needed—too much can slow progress, too little leads to false wins. Some suggest Bayesian methods or permutation tests, and note that small sample sizes make strong statistics hard. Others say people often want to show good results to bosses, making fishing for positive findings common. The key is to balance speed, learning, and risk, and be honest about what level of evidence you need.

Next, we look at a project to build a modern, open-source 16mm film projector. Old projectors are hard to fix and not good for new needs, so this team is making one with bright LEDs, modular parts, and open-source controls. They chose the Eiki RT model as a base and used an 800W LED for brightness, which needed water cooling. The prototype was brighter and sharper than old projectors, but had some flicker issues. The team is working to fix these, and experts gave feedback at a film festival.

In the comments, users remember working with film and discuss what features matter most. Some are surprised that such a big LED is needed, and suggest trying different light sources or cooling methods. There’s debate about what features are important—like variable speed—for archivists or artists. Some say projectors are needed for checking films and keeping the original viewing experience. Others warn to keep the design simple and focus on reliability.

Now, let’s talk about Claude Code’s new feature: remote MCP servers. With this, you can connect tools like Sentry or Linear to your coding workflow, seeing error reports or project status right in Claude Code. It’s easy to add a server, and you don’t need to run your own. OAuth handles security, and there’s a growing ecosystem of MCP servers.

Many commenters are excited about the fast growth of MCP tools. Some worry the specs change too quickly and wish for more stability and security. Others point out that with these features, older tools look outdated. People share open source projects for MCP servers and dream about new ways for coding agents to work together. The community is excited, but hopes for better documentation and safer practices.

Next, we have mbake, a tool for formatting and checking Makefiles. Makefiles can get messy, and mbake cleans them up—fixing spaces, tabs, and joining lines. It handles .PHONY targets smartly and can be used from the command line or in VSCode. You can set options in a config file, and it’s good for CI pipelines.

Commenters like that mbake is simple and useful. Some want ways to skip certain rules or use mbake with pre-commit hooks. There’s debate about Make itself—some find it confusing, others say it’s simple and everywhere, making it good for teaching and automation. Some prefer shell scripts, but others point out Make is almost always installed.

Let’s talk about Type Inference Zoo, a website where you can try different type inference algorithms in your browser. It’s made for learning and testing how languages figure out types. You don’t need to install anything, and the code is easy to read. It helps students and language designers see results right away, without dealing with complex math.

Comments are positive—users like that the tool is simple and interactive, making hard ideas more approachable. Some share links to other type-related projects, and many agree it’s a great teaching tool. People want more features, but agree it fills a real need for learning about type inference.

Now, a story from history: William Playfair, the man who invented bar charts and pie charts, also lived a wild life full of scams and spying. Born in Scotland in 1759, Playfair worked with big names, failed at many businesses, and even ended up in debtors’ prison. He was involved in scandals in France and the US, tried to start a bank, and worked as a spy. He even came up with the idea to print fake French money to hurt France’s economy. Despite his troubles, Playfair’s big idea was to use pictures—charts—to explain numbers. He made the first bar chart in 1786 and the first pie chart later.

In the comments, people joke about how someone known for fraud also invented charts, which can be used to mislead. Others enjoy learning about Playfair’s wild story and suggest it would make a good TV show. Some mention Florence Nightingale, who also made important charts. Overall, people like hearing the strange history behind these common tools.

Finally, Denmark has a program that lets hobbyists use metal detectors to find old artifacts. If you find something important and report it, you get paid, sometimes a lot. This encourages people to share discoveries with experts, not hide or sell them illegally. One big find was a gold disk with the oldest written mention of the Norse god Odin in Denmark. The program helps experts study where and how objects were found, which teaches us about history.

In the comments, people talk about laws in other countries, and some wish they could metal detect themselves. There’s debate about whether it’s easy to sell found gold, and most agree that paying finders encourages honesty. Some worry amateurs can hurt the scientific value if they dig badly. Others argue about what should happen to artifacts—should museums keep them, or should they be shared? There’s also talk about how the meaning of gods like Odin changed over time. Many like how Denmark’s system lets regular people help with archaeology and makes more discoveries possible.

That’s all for today’s episode. Thanks for listening to Hacker News Daily Podcast. See you tomorrow!